<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aemple</title>
  
  <subtitle>不懂则学  懂则分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://aemple.top/"/>
  <updated>2018-11-01T10:25:39.578Z</updated>
  <id>http://aemple.top/</id>
  
  <author>
    <name>Aemple</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue CLI使用scss</title>
    <link href="http://aemple.top/2018/04/12/vue/"/>
    <id>http://aemple.top/2018/04/12/vue/</id>
    <published>2018-04-12T02:13:25.000Z</published>
    <updated>2018-11-01T10:25:39.578Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/avatar.jpg" alt="图片"></p><h2 id="在Vue-CLI脚手架中使用scss"><a href="#在Vue-CLI脚手架中使用scss" class="headerlink" title="在Vue CLI脚手架中使用scss"></a>在Vue CLI脚手架中使用scss</h2><p>今天学习vue当中遇到了如何配置scss的问题经过查证，写出记录。</p><p><code>第一步:</code></p><p>npm install sass-loader node-sass</p><p>或者</p><p>yarn add sass-loader node-sass</p><blockquote><p>如果node-sass在Windows中安装失败(需要Python和C++构建工具），大家可以使用cnpm单独安装node-sass</p></blockquote><p><code>第二步:</code></p><p>在vue文件中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style  lang=&apos;scss&apos;&gt;</span><br><span class="line">![scss](https://tse4-mm.cn.bing.net/th?id=OIP.HuHbi6D0rpzsTenMxWgfXgHaFj&amp;w=253&amp;h=184&amp;c=7&amp;o=5&amp;pid=1.7)</span><br><span class="line">#app &#123;</span><br><span class="line"></span><br><span class="line">        @import  url(&apos;./assets/aaa.scss&apos;); // 引入单独的scss文件</span><br><span class="line"></span><br><span class="line">        font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif;</span><br><span class="line"></span><br><span class="line">        -webkit-font-smoothing: antialiased;</span><br><span class="line"></span><br><span class="line">        -moz-osx-font-smoothing: grayscale;</span><br><span class="line"></span><br><span class="line">        text-align: center;</span><br><span class="line"></span><br><span class="line">        color: #2c3e50;</span><br><span class="line"></span><br><span class="line">        margin-top: 60px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="这样就很愉快的完成了！"><a href="#这样就很愉快的完成了！" class="headerlink" title="这样就很愉快的完成了！"></a>这样就很愉快的完成了！</h4><h4 id="使用Sass同理"><a href="#使用Sass同理" class="headerlink" title="使用Sass同理"></a>使用Sass同理</h4><p><code>## Sass使用</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/avatar.jpg&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在Vue-CLI脚手架中使用scss&quot;&gt;&lt;a href=&quot;#在Vue-CLI脚手架中使用scss&quot; class=&quot;headerlink&quot; title=&quot;在Vue CLI脚
      
    
    </summary>
    
      <category term="Vue" scheme="http://aemple.top/categories/Vue/"/>
    
    
      <category term="导航" scheme="http://aemple.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>天上便落下一粒沙，从此便有了撒哈拉--初入大学</title>
    <link href="http://aemple.top/2018/04/09/SH-1/"/>
    <id>http://aemple.top/2018/04/09/SH-1/</id>
    <published>2018-04-09T13:03:32.000Z</published>
    <updated>2018-11-01T10:24:34.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我的大学生活"><a href="#我的大学生活" class="headerlink" title="我的大学生活"></a>我的大学生活</h2><p><img src="https://pic4.zhimg.com/v2-a9976f2c7a0a2a8e2a94a105ed24ea23_r.jpg" alt="大学"></p><h3 id="“准”大学生活"><a href="#“准”大学生活" class="headerlink" title="“准”大学生活:"></a>“准”大学生活:</h3><p>  高考后感觉身上的担子轻了，是到放松任性玩儿的时候了，于是高考后的六月七月都被我放肆的挥霍了。就在七月末的时候，突然冒出了一个奇怪的想法。</p><p>  我想去找一份工作尝试着靠自己的能力来拿到一笔完完全全属于自己的money，但当时因为暑假已经不多了，所以在寻找了大概一个星期后也没有找到合适的。最后这个挺不错的想法，也被我否定了。剩下的时间，就回到了自己的家乡，开始着手准备迎接我的大学生活。</p><p>  但回家后的生活过的也分的颓废，每天大概一两点睡差不多11点起床然后吃了饭之后可能又是躺尸啊，因为天气比较热。离去大学报到的时间越来越近了，我开始去网上寻找大学需要准备一些什么东西，然后心满意足的买了各种各样自己认为可能会需要的东西，在2016年9月2号的时候，我拖着它们来到了属于我的大学，开始了我的大学生活。</p><p>  <img src="https://pic1.zhimg.com/80/v2-5020f286c69b220d15619367b41c3010_hd.jpg" alt="开始"></p><h3 id="大学生活的开始（大一上学期）"><a href="#大学生活的开始（大一上学期）" class="headerlink" title="大学生活的开始（大一上学期）:"></a>大学生活的开始（大一上学期）:</h3><h4 id="军训"><a href="#军训" class="headerlink" title="军训"></a>军训</h4><p>  进入大学最开始的一件事可能就是军训了。我对军训的记忆就是累和放松，感到累，是因为每天要在特别热的环境下训练，不经意间，可能你还会收到教官的体罚。感到放松是因为每次休息或者教官带我们拉军歌大家一起玩，一起小游戏都会让你感觉特别的放松。</p><h4 id="社团、学生会"><a href="#社团、学生会" class="headerlink" title="社团、学生会"></a>社团、学生会</h4><p>  军训后差不多就是学生会的招募了，当时面对各种各样的学生会自己感到很迷茫，对他们都没有太多的了解。他后来抱着自己想当一名志愿者，去帮助一下别人想法。经过了一轮面试，二轮面试，试用期这几个步骤终于成为了一名青协小干事。学生会给我留下的记忆就是温暖禾迷茫。会感到温暖欣慰，学生会是一个特别大的大家庭，每个人都是互相帮助来完成这个大家庭应该去完成的事情，而且在如果说某个人过生日，大家都会一起帮你过，常一起出去玩，一起做一些小活动，所以会感觉到温暖。感动迷茫，是因为很多事情自己之前都没有接触过功能无论是在对人或者对物都遇到了很多之前没遇到过的情景。刚加入学生会去死，学到了挺多认识到了许多许多新的朋友，知道了许多做事儿做人的方法。</p><h4 id="专业方向"><a href="#专业方向" class="headerlink" title="专业方向"></a>专业方向</h4><p>加入学生会后不久学校或者学院特色的学长课堂开课了，当时我对学长课堂的各个方向基本都不太了解，在询问的几个学长之后。他们给出了我一些建议，最后选择了前端这个方向，能够选择到这个方向感觉也是人生对一种幸运，学长课堂在大二或者说大一下期仍然保留着的并不多，而就是其中一个，当时代前段的学长也不止一个到现‘在保留的却只有教我的学长还在带我们。在学长课堂的学习过程中学会的也不仅仅是一些专业知识。觉得自己更加去学会了去运用一些东西些论坛一些搜索引擎来解决问题的思想和方法。</p><h4 id="大学课堂"><a href="#大学课堂" class="headerlink" title="大学课堂"></a>大学课堂</h4><p>“自觉”是我对大学课堂的认识，在大学的课堂老司机的人不会在意你听课了，或者没有听课，老师也不会特别严苛的去检查你的任何关于学习的方面。</p><p> <img src="&#39;https://pic1.zhimg.com/80/v2-c2af705879b988e206f4be4f6638fd18_hd.png&#39;" alt="结束"></p><p> 时间很快，差不多就到一个学期就这么过去了，一直踩着好运的我也以班级第二的成绩，哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈。</p><h4 id="持续更新中···········"><a href="#持续更新中···········" class="headerlink" title="持续更新中···········"></a>持续更新中···········</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;我的大学生活&quot;&gt;&lt;a href=&quot;#我的大学生活&quot; class=&quot;headerlink&quot; title=&quot;我的大学生活&quot;&gt;&lt;/a&gt;我的大学生活&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a9976f2c7a0a2a8e2a
      
    
    </summary>
    
      <category term="生活" scheme="http://aemple.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="导航" scheme="http://aemple.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>浅谈--forEach、for in、for of、for</title>
    <link href="http://aemple.top/2018/03/29/js-%E5%BE%AA%E7%8E%AF%E5%8C%BA%E5%88%AB/"/>
    <id>http://aemple.top/2018/03/29/js-循环区别/</id>
    <published>2018-03-29T01:23:18.000Z</published>
    <updated>2018-11-01T09:21:33.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>从ES5开始 Javascript内置了forEach方法 用来遍历<strong>数组</strong> 对只能是数组！！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  let arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;]</span><br><span class="line">arr.forEach(function (val, index, arr) &#123;</span><br><span class="line">     // val是当前元素，index当前元素索引，arr当前数组</span><br><span class="line">     //this：window</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>划重点上面的forEach里的<strong>this =&gt; window</strong>    怎么改呢？ 就是利用forEach的第二个参数了！！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  let arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;]</span><br><span class="line">arr.forEach(function (val, index, arr) &#123;</span><br><span class="line">     // val是当前元素，index当前元素索引，arr当前数组</span><br><span class="line">     //this =&gt;obj</span><br><span class="line">&#125;,obj)</span><br></pre></td></tr></table></figure><p>总结：写法简单了很多，但是也存在一个局限 就是你不能中断循环(使用break语句或使用return语句），而且只支持数组</p><h2 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h2><p>for-in循环实际是<strong>为循环”enumerable“对象而设计的</strong>,当然也可以用于数组，但是不推荐</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;a: &apos;1&apos;, b: &apos;2&apos;, c: &apos;3&apos;, d: &apos;4&apos;&#125;</span><br><span class="line">for (let index in obj) &#123;</span><br><span class="line">    console.log(index)    //遍历的实际上是对象的属性名称 a,b,c,d</span><br><span class="line">    console.log(obj[index])  //这个才是属性对应的值1，2，3，4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码会出现的问题：<br>1.index 值 会是字符串（String）类型<br>2.循环不仅会遍历数组元素，还会遍历任意其他自定义添加的属性。</p><h2 id="for-of"><a href="#for-of" class="headerlink" title="for-of"></a>for-of</h2><p> 首先它是<strong>ES6</strong>中新增加的语法 </p><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> let arr = [&apos;China&apos;, &apos;America&apos;, &apos;Korea&apos;]</span><br><span class="line">for (let o of arr) &#123;</span><br><span class="line">    console.log(o) //China, America, Korea</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="它并不能循环一个普通对象"><a href="#它并不能循环一个普通对象" class="headerlink" title="它并不能循环一个普通对象"></a>它<strong>并不能</strong>循环一个普通对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;a: &apos;1&apos;, b: &apos;2&apos;, c: &apos;3&apos;, d: &apos;4&apos;&#125;</span><br><span class="line">for (let o of obj) &#123;</span><br><span class="line">    console.log(o)   //Uncaught TypeError: obj[Symbol.iterator] is not a function</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是可以循环一个<strong>拥有enumerable属性的</strong>对象。<br>如果我们按对象所拥有的属性进行循环，可使用内置的Object.keys()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;a: &apos;1&apos;, b: &apos;2&apos;, c: &apos;3&apos;, d: &apos;4&apos;&#125;</span><br><span class="line">for (let o of Object.keys(obj)) &#123;</span><br><span class="line">    console.log(o) // a,b,c,d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果我们按对象所拥有的属性值进行循环，可使用内置的Object.values()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;a: &apos;1&apos;, b: &apos;2&apos;, c: &apos;3&apos;, d: &apos;4&apos;&#125;</span><br><span class="line">for (let o of Object.values(obj)) &#123;</span><br><span class="line">    console.log(o) // 1,2,3,4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="循环一个字符串"><a href="#循环一个字符串" class="headerlink" title="循环一个字符串"></a>循环一个字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let str = &apos;love&apos;</span><br><span class="line">for (let o of str) &#123;</span><br><span class="line">    console.log(o) // l,o,v,e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环一个Map"><a href="#循环一个Map" class="headerlink" title="循环一个Map"></a>循环一个Map</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">for (let [key, value] of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br><span class="line"></span><br><span class="line">for (let entry of iterable) &#123;</span><br><span class="line">  console.log(entry);</span><br><span class="line">&#125;</span><br><span class="line">// [a, 1]</span><br><span class="line">// [b, 2]</span><br><span class="line">// [c, 3]</span><br></pre></td></tr></table></figure><h3 id="循环一个Set"><a href="#循环一个Set" class="headerlink" title="循环一个Set"></a>循环一个Set</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = new Set([1, 1, 2, 2, 3, 3]);</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure><h3 id="循环一个类型化数组"><a href="#循环一个类型化数组" class="headerlink" title="循环一个类型化数组"></a>循环一个类型化数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let iterable = new Uint8Array([0x00, 0xff]);</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 0</span><br><span class="line">// 255</span><br></pre></td></tr></table></figure><p>总结：<br>1.可以避免所有 <strong>for-in</strong> 循环的陷阱</p><p>2.不同于 <strong>forEach()</strong>，他可以使用 break, continue 和 return</p><p>3.for-of 循环不仅仅支持数组的遍历。同样<strong>适用于很多类似数组的对象</strong></p><p>4.它也<strong>支持字符串</strong>的遍历</p><p>5.for-of 并不适用于处理原有的原生对象</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;forEach&quot;&gt;&lt;a href=&quot;#forEach&quot; class=&quot;headerlink&quot; title=&quot;forEach&quot;&gt;&lt;/a&gt;forEach&lt;/h2&gt;&lt;p&gt;从ES5开始 Javascript内置了forEach方法 用来遍历&lt;strong&gt;数组&lt;/stro
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://aemple.top/categories/JavaScript/"/>
    
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>javaScript递归函数</title>
    <link href="http://aemple.top/2018/03/27/digui/"/>
    <id>http://aemple.top/2018/03/27/digui/</id>
    <published>2018-03-27T07:33:09.000Z</published>
    <updated>2018-10-24T11:15:40.654Z</updated>
    
    <content type="html"><![CDATA[<h4 id="首先什么是递归"><a href="#首先什么是递归" class="headerlink" title="首先什么是递归"></a>首先什么是递归</h4><blockquote><p>递归是一项非常重要的编程技巧，函数通过它调用其本身。 —msdn文档介绍</p></blockquote><p>举个例子,常用的乘阶。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function factorial(i) &#123;</span><br><span class="line">if (i === 1) return i;</span><br><span class="line">return i* factorial(i - 1);</span><br><span class="line">&#125;</span><br><span class="line">console.log(factorial(5)); // 5*4*3*2*1</span><br></pre></td></tr></table></figure><p>分几个步骤:</p><ul><li>声明一个函数factorial，接受一个参数i。</li><li>判断i是否等于1，如果等于1则直接返回i。</li><li>如果i不等于1，则返回i * factorial(i - 1)，再次调用函数本身。(如此如果严格可以判断i是否大于等于0）</li><li>然后函数就会重复2 - 3两个步骤，直至i减到1为止。</li></ul><h3 id="JavaScript执行上下文栈"><a href="#JavaScript执行上下文栈" class="headerlink" title="JavaScript执行上下文栈"></a>JavaScript执行上下文栈</h3><p>   大家可以看看这个教程，我认为很不错！<a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">地址</a></p><ul><li>JavaScript执行顺序。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var foo = functiom () &#123;</span><br><span class="line">console.log(&apos;foo1&apos;)；</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line">var foo = functiom () &#123;</span><br><span class="line">console.log(&apos;foo2&apos;)；</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line">//最后会打印出</span><br><span class="line">//foo1</span><br><span class="line">//foo2</span><br></pre></td></tr></table></figure><ul><li>解释一下这个为什么不会被覆盖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//上面的代码写成这样就比较好理解</span><br><span class="line">var foo;</span><br><span class="line">foo = function() &#123;</span><br><span class="line">console.log(&apos;foo1&apos;)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line">foo = function() &#123;</span><br><span class="line">console.log(&apos;foo2&apos;)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&apos;foo1&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();  // foo2</span><br><span class="line"></span><br><span class="line">function foo() &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&apos;foo2&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); // foo2</span><br></pre></td></tr></table></figure><p>再解释一下这个！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&apos;foo1&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">function foo() &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&apos;foo2&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">foo();  // foo2</span><br><span class="line">foo();  // foo2</span><br></pre></td></tr></table></figure></p><ul><li>函数被提升之后第二个覆盖了第一个，这是JavaScript作用域提升。</li><li>JavaScript的可执行代码有三种，全局代码，函数代码，eval代码</li><li>当执行到一个函数的时候就会进行准备工作，叫做执行上下文。</li><li>原博客把执行上下文说的很清楚了，我理解了一部分。有兴趣可以点击上面的连接继续了解，继续讲递归。</li></ul><h4 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h4><p>根据上面的知识，以及以前的知识，我们都知道递归会消耗大量内存，之执行一个函数就压入上下文栈，直至递归结束才会释放，造成递归占用大量内存。</p><blockquote><p>尾调用，是指函数内部的最后一个动作是函数调用，改调用的返回值，直接返回给函数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function f (x) &#123;</span><br><span class="line">return g(x)</span><br><span class="line">&#125;</span><br><span class="line">// 尾调用</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function f(x) &#123;</span><br><span class="line">return g(x) - 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 非尾调用</span><br></pre></td></tr></table></figure><p>用上面的上下文栈，来看第二个函数，函数f执行指挥返回一个g函数而g函数的结果需要f函数作用域内 - 1才是结果，导致引用的时候g函数入栈的时候会持有f函数的作用域，f得不到释放，一直等g函数结束之后才会被释放。</p><p>现在优化一下上面的递归</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function factorial(i, res) &#123;</span><br><span class="line">if(i === 1) return res;</span><br><span class="line">return factorial(i-1, i*res)</span><br><span class="line">&#125;</span><br><span class="line">console.log(factorial(4, 1))</span><br></pre></td></tr></table></figure><p>这样优化函数，保持返回的函数没有上个函数的引用，这样上个函数在入栈之后执行到return之后就会被释放，而不会和上面的递归一样等到最终结果才会被释放。（ps。JavaScript上下文栈，需要好好看看比较重要）</p><p><code>## javaScript</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;首先什么是递归&quot;&gt;&lt;a href=&quot;#首先什么是递归&quot; class=&quot;headerlink&quot; title=&quot;首先什么是递归&quot;&gt;&lt;/a&gt;首先什么是递归&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;递归是一项非常重要的编程技巧，函数通过它调用其本身。 —msdn文档介绍&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://aemple.top/categories/JavaScript/"/>
    
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>占领未来的打包工具---Parcel（介绍）</title>
    <link href="http://aemple.top/2018/03/19/packParcelOne/"/>
    <id>http://aemple.top/2018/03/19/packParcelOne/</id>
    <published>2018-03-19T14:01:32.000Z</published>
    <updated>2018-03-20T10:01:51.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概况"><a href="#基本概况" class="headerlink" title="基本概况"></a>基本概况</h1><p>最近大家都在关注一个很流行的类似 webpack 的前端构建工具 Parcel。这个库刚出来没多久(截至目前发布几十天)，但是很受欢迎，看下图就知道它到底有多火了。</p><p><img src="/images/picblog/parcel1.png" alt="图片"></p><p><strong>这么火的东西我们怎么能不学呢？那么它到底火在哪儿？来看看我的示例分析(教程)吧！！！</strong></p><h2 id="官方介绍地址"><a href="#官方介绍地址" class="headerlink" title="官方介绍地址"></a>官方介绍地址</h2><p><strong>官方地址：</strong><a href="https://parceljs.org/" target="_blank" rel="noopener">https://parceljs.org/</a></p><p><strong>GitHub地址：</strong><a href="https://github.com/parcel-bundler/parcel" target="_blank" rel="noopener">https://github.com/parcel-bundler/parcel</a></p><h1 id="Parcel-VS-Webpack"><a href="#Parcel-VS-Webpack" class="headerlink" title="Parcel VS Webpack"></a>Parcel VS Webpack</h1><h2 id="听我扯一扯"><a href="#听我扯一扯" class="headerlink" title="听我扯一扯"></a>听我扯一扯</h2><p>介绍这个库之前，我来说一下我个人觉得 webpack 的一些不好的地方（相对于 Parcel）。</p><p>  1、需要写配置文件（webpack.config.js），可能每使用一个功能，比如加载图片或 css，都要添加配置，要维护配置文件，而 Parcel 不需要。</p><p>  2、感觉编译或加载速度有些慢，特别是库多或项目复杂的时候，虽然有一些办法代码拆分的方法可以解决，比如 CommonsChunkPlugin 或 DLLPlugin 之类的，但这些方法有些复杂。</p><h2 id="官方数据"><a href="#官方数据" class="headerlink" title="官方数据"></a>官方数据</h2><p>  <strong>打包速度</strong></p><p>  真的飞一般的感觉吧！！！</p><p>  <img src="/images/picblog/parcel2.png" alt="图片"></p><h2 id="学习成本"><a href="#学习成本" class="headerlink" title="学习成本"></a>学习成本</h2><p> webpack需要一定的时间去学习如何使用而 Parcel 有很多优点，可以不使用配置文件，也就是说你只管写代码，它会自动运行，很智能化，打个比方吧，比如在 webpack 中如果要处理 css，那得要安装和加载一个 css 的 loader，然后配置文件写上几行，可是 Parcel 不需要，直接用就行。Parcel 学习起来比较简单，基本上可以说 “不用学习”，只是使用就可以了。<strong>除此之外</strong> 模块热替换和代码拆分的功能，Parcel 也有，还有，如果要你用 Parcel 写一个 react 的运行环境，可能不需要配置任何内容，只要安装几个 react 的包就可以用起来了。</p><p><strong>说了这么多，我还是要把官方对它的特性进行概括的图片放出来：</strong></p><p><img src="/images/picblog/parcel3.png" alt="图片"></p><blockquote><p><strong>说到这里小伙伴们是不是和我当初一样心动了呢？  下一篇博客我们一起上手玩起来吧！！！</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本概况&quot;&gt;&lt;a href=&quot;#基本概况&quot; class=&quot;headerlink&quot; title=&quot;基本概况&quot;&gt;&lt;/a&gt;基本概况&lt;/h1&gt;&lt;p&gt;最近大家都在关注一个很流行的类似 webpack 的前端构建工具 Parcel。这个库刚出来没多久(截至目前发布几十天)，但
      
    
    </summary>
    
      <category term="打包工具" scheme="http://aemple.top/categories/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="导航" scheme="http://aemple.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>markdown基础范例</title>
    <link href="http://aemple.top/2018/03/13/markdown/"/>
    <id>http://aemple.top/2018/03/13/markdown/</id>
    <published>2018-03-13T11:01:55.000Z</published>
    <updated>2018-08-15T06:54:30.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你好，前端"><a href="#你好，前端" class="headerlink" title="你好，前端"></a>你好，前端</h1><h2 id="第一篇文章哦"><a href="#第一篇文章哦" class="headerlink" title="第一篇文章哦"></a>第一篇文章哦</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 你好，前端</span><br><span class="line">## 第一篇文章哦</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure><hr><ul><li>列表1</li><li>列表2<br> a 次列表<br> b 此列表</li><li>列表三</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 列表1</span><br><span class="line">- 列表2</span><br><span class="line">   a 次列表</span><br><span class="line">   b 此列表</span><br><span class="line">- 列表三</span><br></pre></td></tr></table></figure><hr><p><a href="http://www.aemple.top" target="_blank" rel="noopener">博客导航</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[博客导航](http://www.aemple.top)</span><br></pre></td></tr></table></figure><hr><p><img src="/images/avatar.jpg" alt="图片"></p><p><em>字体斜体</em><br><strong>字体加粗</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片](/images/avatar.jpg)</span><br><span class="line"></span><br><span class="line">*字体斜体*</span><br><span class="line">**字体加粗**</span><br></pre></td></tr></table></figure><hr><p><code>&lt;html&gt;&lt;/html&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;title&gt;我是标题&lt;/title&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">      &lt;h1&gt;啦啦啦啦&lt;h1&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><blockquote><p>我是应用块哦</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;我是应用块哦</span><br></pre></td></tr></table></figure><hr><hr><blockquote><p><strong>这些都经常用到希望小伙伴们加深记忆</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;你好，前端&quot;&gt;&lt;a href=&quot;#你好，前端&quot; class=&quot;headerlink&quot; title=&quot;你好，前端&quot;&gt;&lt;/a&gt;你好，前端&lt;/h1&gt;&lt;h2 id=&quot;第一篇文章哦&quot;&gt;&lt;a href=&quot;#第一篇文章哦&quot; class=&quot;headerlink&quot; title=&quot;第
      
    
    </summary>
    
      <category term="markdown" scheme="http://aemple.top/categories/markdown/"/>
    
    
      <category term="导航" scheme="http://aemple.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hello-Hexo</title>
    <link href="http://aemple.top/2018/03/13/helloHexo/"/>
    <id>http://aemple.top/2018/03/13/helloHexo/</id>
    <published>2018-03-13T06:22:03.000Z</published>
    <updated>2018-10-24T09:56:35.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一次当然要hello啦，我是邓波，是你小粉丝。"><a href="#第一次当然要hello啦，我是邓波，是你小粉丝。" class="headerlink" title="第一次当然要hello啦，我是邓波，是你小粉丝。"></a>第一次当然要hello啦，我是邓波，是你小粉丝。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一次当然要hello啦，我是邓波，是你小粉丝。&quot;&gt;&lt;a href=&quot;#第一次当然要hello啦，我是邓波，是你小粉丝。&quot; class=&quot;headerlink&quot; title=&quot;第一次当然要hello啦，我是邓波，是你小粉丝。&quot;&gt;&lt;/a&gt;第一次当然要hello啦，我
      
    
    </summary>
    
      <category term="杂记" scheme="http://aemple.top/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
