<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aemple</title>
  
  <subtitle>不懂则学  懂则分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://aemple.top/"/>
  <updated>2019-06-15T12:39:54.663Z</updated>
  <id>http://aemple.top/</id>
  
  <author>
    <name>Aemple</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【译】Vue 3.0 对 Web 开发意味着什么？</title>
    <link href="http://aemple.top/2019/02/26/vue3.0/"/>
    <id>http://aemple.top/2019/02/26/vue3.0/</id>
    <published>2019-02-25T17:24:06.000Z</published>
    <updated>2019-06-15T12:39:54.663Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2019/2/6/168c327756c167db?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片"></p><a id="more"></a> <blockquote><p>原文地址：<a href="https://medium.com/@mattmaribojoc/what-does-vue-3-0-mean-for-web-development-851052fc0138" target="_blank" rel="noopener">What Does Vue 3.0 Mean for Web Development?</a></p></blockquote><blockquote><p>原文作者 : <a href="https://medium.com/@mattmaribojoc" target="_blank" rel="noopener">Matt Maribojoc</a></p></blockquote><blockquote><p>译者： Aemple</p></blockquote><h2 id="新年到-Vue2-6悄然发布🎉🎉🎉"><a href="#新年到-Vue2-6悄然发布🎉🎉🎉" class="headerlink" title="新年到  Vue2.6悄然发布🎉🎉🎉"></a>新年到  Vue2.6悄然发布🎉🎉🎉</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 去年11月，Vue的创建者Evan You向我们展示了Vue 3.0 —— 这是不断上升的Javascript框架的最新版本。这些优化使Vue更高效，更模块化且更易于使用。我将讨论这些变化以及我认为的他们将在Vue 3.0发布后对现有开发产生的影响。</p><h2 id="现在的Vue是怎样的？"><a href="#现在的Vue是怎样的？" class="headerlink" title="现在的Vue是怎样的？"></a>现在的Vue是怎样的？</h2><p> 用他们自己的话来说，Vue是一个“用于构建用户应用程序的渐进式框架”。它的设计非常灵活，既可以将单个Vue库合并到其他项目中，也可以完全用VUE驱动复杂的项目。</p><p>Vue通常被视为更易于理解和易于实现的框架之一。支持纯HTML模板，而像React这样的工具是使用Javascript定义DOM元素。</p><p>截至2019年初，我们仍然在使用Vue 2.0。虽然与React和Angular相比，Vue仍只占据了很小的市场份额，但Vue的受欢迎程度不断提高。在我看来，Vue 3.0的发布将提升其使用率，并促使其成为其他主要框架的替代品。</p><p>下面的图表显示了每个框架在工作中的使用数量。正如你所看到的，VueJS在接近目前的行业标准之前仍然有一条很长的路要走。（资料来源：<a href="https://medium.com/@TechMagic" target="_blank" rel="noopener">TechMagic</a>）</p><p><img src="https://user-gold-cdn.xitu.io/2019/2/6/168c32a3715c9d87?w=800&amp;h=494&amp;f=png&amp;s=45849" alt=""></p><h2 id="Vue3-0中最明显的变化"><a href="#Vue3-0中最明显的变化" class="headerlink" title="Vue3.0中最明显的变化"></a>Vue3.0中最明显的变化</h2><p>在他的演讲中，Evan You强调了Vue 3.0中的五个关键变化：</p><p>1、更快</p><p>2、更小</p><p>3、更易于维护</p><p>4、更多的原生支持</p><p>5、更易于开发使用</p><p><strong>现在让我们深入探讨这些。</strong></p><h2 id="让速度更快"><a href="#让速度更快" class="headerlink" title="让速度更快"></a>让速度更快</h2><p>这个主题占据了Evan You演讲的大部分时间，因为它具有最大的技术变化，显然是Vue目前的主要卖点之一。</p><p>VueJS已经以其渲染速度而闻名。在它的比较测试中，它的性能优于其他框架。但是，对Vue2.0代码的边缘情况和修复的数量使得Vue团队决定使用微优化完全重写渲染代码。据Evan You介绍，这些优化可以在安装和初始化速度上增加100%。</p><p>与其他框架一样，VueJS使用虚拟DOM来呈现其组件。为了加速渲染过程，必须减少此虚拟DOM的工作负载。Vue3.0中包含了以下特性来满足这个目标：</p><p><strong>编译提示</strong>——通过检索渲染过程，Vue 3.0将输出更好的编译时提示，这些提示显示了代码如何更好的优化。</p><p><strong>组件快速确认</strong>——不再通过检查模板对象是否是组件，VUE 3.0将假设大写标记为一个组件。这个假设消除了猜测，加快了渲染过程。</p><p><strong>单形调用</strong>（Monomorphic Calls）———任何上过计算机科学课程的人-他们的大脑中都有多态性的概念，但是Vue 3.0在呈现过程中使用了单形调用。这种微优化总是将形状相同的对象传递给渲染引擎，这使得Javascript引擎更容易优化。下图来自：Evan You对Vue 3.0的演讲</p><p><img src="https://user-gold-cdn.xitu.io/2019/2/11/168dc9107d0cba31?w=782&amp;h=429&amp;f=png&amp;s=76377" alt=""></p><p><strong>优化插槽</strong>———这个看似复杂的术语实际上归结为一个简单的概念：确保使用它们的实例跟踪依赖关系。目前，每当父组件和子组件具有更新的依赖项时，都将被迫重新呈现。但是，在3.0中，父级和子级将有不同的依赖项，并且只有当它们各自的依赖项发生变化时才会更新。这大大减少了页面上发生的重呈现次数。</p><p><img src="https://user-gold-cdn.xitu.io/2019/2/11/168dc93ec65fabfe?w=777&amp;h=420&amp;f=png&amp;s=54426" alt=""></p><p><strong>静态树提升</strong>———虽然这不算Vue3.0的更新(它已经存在于VUE 2.0中)，静态树的提升极大地提高了项目速度。提升的意思是不会重新呈现没有任何依赖项的静态元素.这大大减少了虚拟DOM的工作，并节省了许多项目开销。</p><p><strong>Proxy Based Observations</strong><br>——Vue 3.0将使用ES2015基于proxy-based observations来跟踪元素的变化。这哥改变不仅消除了Vue 2.0无法支持的几种情况，而且还可以更好地执行。根据You的演讲，这些优化可以使组件实例初始化速度比现在的1vue2.0版本提高100％。</p><blockquote><p>基于Proxy实现比基于Observations的实现快两倍，内存的使用量也仅仅是Vue 2.0中Observations实现的一半。</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/2/11/168dcc7f0b45e589?w=768&amp;h=424&amp;f=png&amp;s=91750" alt=""></p><h2 id="更轻量级"><a href="#更轻量级" class="headerlink" title="更轻量级"></a>更轻量级</h2><p>目前，VueJS已经很小了（20 kb Gzip）。然而在Vue3.0中由于tree shaking（消除非重要代码）3.0的估计大小大约是10 kb Gzip。<br>这是通过删除所有对VUE项目非必需的库，并通过import语句(而不是在主src中打包)使用它们。</p><h2 id="提高可维护性"><a href="#提高可维护性" class="headerlink" title="提高可维护性"></a>提高可维护性</h2><p><strong>Flow 到 TypeScript</strong> ———为了让更多用户更容易访问，Vue 3.0将从Flow转换为TypeScript。虽然代码库将被重写为使用Typescript，但是然兼容javascript写法。</p><p><strong>更加模块化</strong>———与目前的Vue相比，VUE 3.0是将更加模块化，它依赖于自己的内部包来运行。这使得它具有可定制性和灵活性，同时也使它具有透明度，从而使开发人员能够真正进入源代码。</p><p><strong>编译器重写</strong>———这是我最感兴趣的特性之一。这些更改不仅可以有更好的IDE支持，而且现在它创建了源映射，这意味着当出现运行时错误时，它将给出错误的文件位置和行号。如果您现在在使用Vue，您就会知道现在的运行时错误消息对识别问题并没有多大帮助。这个更新应该足以让开发者们心情大好。</p><p><img src="https://user-gold-cdn.xitu.io/2019/2/11/168dcc482d60d7de?w=228&amp;h=260&amp;f=png&amp;s=21583" alt=""></p><h2 id="更容易定位于Native"><a href="#更容易定位于Native" class="headerlink" title="更容易定位于Native"></a>更容易定位于Native</h2><p>3.0将是与平台无关的———这意味着它将运行纯Javascript，并且不会在其主构建中使用诸如Node.js之类的Web特性。这使得为Web，iOS或Android构建应用程序变得更加容易。通过定位于Native，Vue使自己更像是React的替代品，它对iOS和Android项目提供了大量支持。</p><h2 id="使开发人员的生活更轻松"><a href="#使开发人员的生活更轻松" class="headerlink" title="使开发人员的生活更轻松"></a>使开发人员的生活更轻松</h2><p>虽然看似简单，但我认为这是使用VueJS的主要原因 - 它简单但功能强大。这些都是突出的方面。</p><p><strong>公开Reactivity API</strong>———公开后，新的更改将使得开发人员具有显式创建反应性对象的能力。以及创建自定义重新渲染钩子。3.0还解决了VueJS用户的常见抱怨：何时以及为什么我的组件重新渲染？</p><p>现在有一个renderTrigged事件，它允许人们看到是什么触发了更新。一个神奇的功能，将使VueJS更加透明。</p><p><img src="https://user-gold-cdn.xitu.io/2019/2/11/168dc98e3171e2d1?w=768&amp;h=423&amp;f=png&amp;s=49416" alt=""></p><h2 id="So-What"><a href="#So-What" class="headerlink" title="So What?"></a>So What?</h2><p>你可能在想，“那又怎样？人们仍然会使用React 或者 Angular。你也许是对的。 作为当前的行业标准，Reaction和Angular很可能仍然是组件框架中最受欢迎的选择。然而，在Vue 3.0中有一些有趣的东西可以讨论，这可能会使它在未来几年成为一种更具竞争力的选择。</p><p><strong>速度</strong> 即使是现在，VueJS提供比React或Angular更快的渲染时间。通过Evan You讨论的微优化，Vue可能拥有其他框架的一半渲染时间。这是一个关键点，可以吸引一些开发人员远离其他环境。下表显示了Vue 2.0已经具有的速度和内存优势 - 新的更新应该进一步提高这些优势。</p><p><img src="https://user-gold-cdn.xitu.io/2019/2/6/168c3726a32f03a8?w=294&amp;h=160&amp;f=png&amp;s=20496" alt=""></p><p><strong>适应性</strong> VueJS旨在易于实施。无论您是要将其添加到现有项目还是使用它来为SPA提供支持，都有大量文档和用例可帮助您定义需求。在Vue 3.0中所做的更改，特别是 reactivity hooks和新的模块化设计，使这个已经灵活的语言更加强大。虽然我将继续强调VueJS的简单性，但有许多功能允许更多技术和经验丰富的开发人员完全控制他们的项目。虽然我将继续强调VueJS的简单性，但是有许多特性允许更多的技术人员和经验丰富的开发人员完全控制他们的项目。</p><p><strong>文档</strong>  这可能是“我的问题”，但我个人确实认为Vue的文档比React更易于理解。事实上，我甚至从来没有完成过HelloWorld教程或任何关于Vue的内容。文档足以让我理解使用案例并开始使用。你可以自己看看<a href="https://vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue 官方文档</a>。</p><p><strong>难度</strong> 就像我在谈论文档一样 - Vue非常平易近人。它不仅使用自然HTML，CSS / CSS预处理器（如sass和scss）和Javascript，而且还为相对较新的框架提供了大量的支持和库。对于新开发人员而言，这是非常容易理解的，并且对于高级开发人员来说非常容易扩展。</p><p>为了看到Vue 3.0的全部影响，我们将不得不等到2019年某个时候（希望如此）。<br>Evan You在多伦多VueConf展示的功能似乎使Vue更加强大和高效，因此我对新版本寄予厚望。你对Vue 3.0和新的React、Angular有什么看法呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/2/6/168c327756c167db?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="大前端" scheme="http://aemple.top/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>【译】2019年值得学习的顶尖JavaScript框架和要学习的主题</title>
    <link href="http://aemple.top/2019/02/02/2019kuangjia/"/>
    <id>http://aemple.top/2019/02/02/2019kuangjia/</id>
    <published>2019-02-02T04:57:39.000Z</published>
    <updated>2019-06-15T12:34:19.538Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/picblog/2019kuangjia.png" alt="图片"></p><a id="more"></a> <blockquote><p>译者：Aemple</p></blockquote><blockquote><p>原文作者：Eric Elliott</p></blockquote><blockquote><p>原文地址： <a href="https://medium.com/javascript-scene/top-javascript-frameworks-and-topics-to-learn-in-2019-b4142f38df20" target="_blank" rel="noopener">https://medium.com/javascript-scene/top-javascript-frameworks-and-topics-to-learn-in-2019-b4142f38df20</a></p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>白驹过隙，忽然而已。转眼又到了一年的这个时候，旧的一年的结束和新的一年的开始，我们照常对过去的一年做一些总结并对未来的一年做一些展望：我们的目标是寻找出在工作最具有ROI（投资回报率）的学习主题和技术。人们在劳工作中使用了什么？趋势是什么样的？我们并没有试图挑选最好的东西，而是采用数据驱动的方法来帮助你回答面试官分问题（例如：“你知道<strong>（填空）</strong>吗？）并以此来提高你对技术发展学习的认知。</p><p>我们不会去考虑哪些是最快的性能最好的，或者哪些具有最佳的代码质量。我们假设他们都是快速度高性能的，他们都足以支撑完成工作。剩下最重要的重点就是：实际上大规模使用了什么？</p><h2 id="组件框架"><a href="#组件框架" class="headerlink" title="组件框架"></a>组件框架</h2><p>我们首先看到的一个重要的问题是组件框架的当前状态，我们将主要关注三大问题：React，Angular和Vue.js，主要是因为它们的使用度都远远超过了其余框架，是工作中主要采用的技术。</p><p>去年我注意到Vue.js增长的速度十分迅猛，并提到它可能会在2018年超越Angular（详细请看：<a href="https://medium.com/javascript-scene/top-javascript-libraries-tech-to-learn-in-2018-c38028e028e6" target="_blank" rel="noopener">https://medium.com/javascript-scene/top-javascript-libraries-tech-to-learn-in-2018-c38028e028e6</a> <strong>Top JavaScript Libraries &amp; Tech to Learn in 2018</strong>）。 但这种情况并没有发生，但它仍在快速增长。我还预测转换React用户会相比Angular困难许多，因为React的用户满意度比Angular强得多 - React用户根本没有令人信服的理由进行切换。这与2018年的预期一致.React在2018年牢牢控制其领先优势。</p><p>有趣的是，这三个框架仍然呈指数级增长，同比增长。</p><h3 id="预测：React在2019年将继续占主导地位"><a href="#预测：React在2019年将继续占主导地位" class="headerlink" title="预测：React在2019年将继续占主导地位"></a>预测：React在2019年将继续占主导地位</h3><p>在我留意React的第三年里，React仍然比Angular有更高的满意度（详细可查看：<a href="https://2018.stateofjs.com/cn/front-end-frameworks/overview/）。我目前没有看到任何可能在2019年挑战它的东西。除非出现疯狂的大事并且破坏它，否则React将成为2019年底再次击败的框架。" target="_blank" rel="noopener">https://2018.stateofjs.com/cn/front-end-frameworks/overview/）。我目前没有看到任何可能在2019年挑战它的东西。除非出现疯狂的大事并且破坏它，否则React将成为2019年底再次击败的框架。</a></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/29/16898a348c803783?w=1895&amp;h=868&amp;f=png&amp;s=99999" alt=""><br>说到React，它在不断变得更好。自React 0.14以来，新的React hooks API取代了class我自己最难容忍的API。（class API仍然有效，但钩子API真的好多了）。React还有许多优秀API改进，比如更好地支持代码拆分和并发渲染（具体请参阅 <a href="https://reactjs.org/blog/2018/11/13/react-conf-recap.html），" target="_blank" rel="noopener">https://reactjs.org/blog/2018/11/13/react-conf-recap.html），</a> 这都是将使它在2019年难以被击败的理由。现在，React毫无疑问是该领域最具吸引力的前端框架。（译者PS：借用尤大的话 我们应该去关注怎么把一个框架学好，而不是一味的去比较那个更强）</p><h3 id="数据展示"><a href="#数据展示" class="headerlink" title="数据展示"></a>数据展示</h3><p>我们将查看一些关键数据来衡量行业的兴趣和用途：</p><p>1、Google搜索趋势。不是我最喜欢的指标，但有利于大局观。</p><p>2、包的下载量。这里的目的是在使用框架的过程中捕获真实用户。</p><p>3、来自Indeed.com的工作板发布。使用前几年的相同方法来保持一致性。</p><h4 id="Google搜索趋势（2014年1月-2018年12月）"><a href="#Google搜索趋势（2014年1月-2018年12月）" class="headerlink" title="Google搜索趋势（2014年1月 - 2018年12月）"></a>Google搜索趋势（2014年1月 - 2018年12月）</h4><p><img src="https://user-gold-cdn.xitu.io/2019/1/29/16898abe356c9645?w=800&amp;h=234&amp;f=png&amp;s=52842" alt=""></p><p>React在2018年1月的搜索趋势中超越了Angular，并在今年年底保持领先地位。Vue.js现在在图表上保持可见位置，但仍然是搜索趋势中的一个小因素。比较去年的图表（2014年1月 - 2017年12月）：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/29/16898ad150824767?w=800&amp;h=250&amp;f=png&amp;s=48968" alt=""></p><h4 id="包的下载量"><a href="#包的下载量" class="headerlink" title="包的下载量"></a>包的下载量</h4><p>软件包下载为我们提供了实际使用内容的公平指示，因为开发人员经常在工作时下载所需的软件包。</p><p>过于聪明的读者会注意到，有时候他们会从他们内部的公司包装回购中下载这些东西，我回答说：“为什么是，这确实发生了 - 对所有三个框架都有效。”他们都在企业中建立了立足点，并且我对大规模数据的平均功率充满信心。</p><p><strong>React月度下载：2014-2018</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/29/16898aefb93477b6?w=800&amp;h=279&amp;f=png&amp;s=25782" alt=""></p><p><strong>Angular月度下载：2014-2018</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/29/16898afea570050b?w=800&amp;h=275&amp;f=png&amp;s=23653" alt=""></p><p><strong>Vue每月下载：2014-2018</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/29/16898b05d5315199?w=800&amp;h=279&amp;f=png&amp;s=24198" alt=""></p><p><strong> 让我们看一下下载份额的快速视觉比较：</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/29/16898b0b76433d8c?w=600&amp;h=371&amp;f=png&amp;s=19347" alt=""></p><p>“但你忘记了Angular 1.0的全部内容！它在企业中仍然很大。“</p><p>不，我没忘记。Angular 1.0在企业中仍然使用的方式与Windows XP在企业中仍然使用的方式相同。肯定会有足够多的人注意到这一点，但新版本早已相形见绌，现在它已经不如其他框架重要了。</p><p>为什么？因为整个软件行业，以及在所有部门（包括企业）中使用JavaScript的速度都在快速增长，以至于即使旧版应用程序从未升级，新安装也会使旧版安装变得相形见绌。</p><p>有关证据，请再看一下这些下载图表。2018年的下载量比前几年的总和还要多。</p><h4 id="招聘委员会发布"><a href="#招聘委员会发布" class="headerlink" title="招聘委员会发布"></a>招聘委员会发布</h4><p>Indeed.com汇总了各种职位委员会的职位发布。每年，我们都会在工作岗位上提及每个框架，以便更好地了解人们的招聘情况。这是今年的样子（2018年12月按框架划分的职位发布）：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/29/16898b7f55b39bcc?w=600&amp;h=371&amp;f=png&amp;s=9900" alt=""></p><ul><li><p>React：24,640</p></li><li><p>Angular：19,032</p></li><li><p>jQuery：14,272</p></li><li><p>Vue：2,816</p></li><li><p>Ember（未图示）：2,397</p></li></ul><p>同样，今年的就业岗位比上一年多得多。我放弃了Ember，因为它显然没有以其他一切的速度增长。我不建议学习它来为将来的工作安排做准备。jQuery和Ember的工作变化不大，但其他一切都增长了很多。</p><p>值得庆幸的是，加入软件工程领域的新人数量在2018年也增长了很多，但我们需要继续雇用和培训初级开发人员（这意味着我们需要合格的高级开发人员来指导他们），否则我们将不会保留与爆炸性的就业增长同步。相比之下，这是去年的图表：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/29/16898ba03ad5ea50?w=800&amp;h=479&amp;f=png&amp;s=22384" alt=""></p><p>平均工资在2018年再次攀升，从每年110,000美元攀升至每年11.1万美元。有趣的是，薪资清单落后于新的雇佣预期，如果招聘经理不调整开发商的市场并提供更大的加薪，他们将难以雇用和留住开发人员。保留和偷猎在2018年仍然是一个巨大的问题，因为员工在其他地方跳槽以获得高薪工作。</p><p>保证数据尽量准确的方法：在Indeed.com上进行求职。为了消除误报，我将搜索与关键字“软件”配对以增强相关性的机会，然后乘以~1.5（大致是使用“软件”一词​​的编程工作列表与不使用“软件”的编程工作列表之间的差异。 ）所有SERPS按日期排序，并检查相关性。结果数字不是100％准确，但它们足以满足本文中使用的相对近似值。</p><h3 id="下面是译者对框架这块选择的一些评论-有兴趣的可以看看"><a href="#下面是译者对框架这块选择的一些评论-有兴趣的可以看看" class="headerlink" title="下面是译者对框架这块选择的一些评论 有兴趣的可以看看"></a>下面是译者对框架这块选择的一些评论 有兴趣的可以看看</h3><p><strong>from：Evan You</strong></p><p>免责声明：我是Vue的作者。</p><p>总的来说，我确实认为React将在2019年继续保持强势，但本文逻辑中存在一些根本性缺陷：</p><p>1、我对你的“满意度评分”的定义感到困惑。来自JS状态调查的满意度评级应该计算为使用框架并将再次使用该框架的用户的比例（两者都将使用和不再使用）。在使用过React的14417位用户中，13062会再次使用它，这是90.6％的满意度。对于Vue来说，6374中的5810 = 91.2％。我不确定这是如何转化为React的“用户满意度更高”。</p><p>2、我在其他地方已经提到了这一点，但谷歌趋势和NPM下载是非常不准确的指标，有太多变量在起作用。Google Trends关键字的误报是巨大的，无法摆脱; NPM下载与FB / Google的内部使用以及使用NPM /通过CDN /使用CI（具有依赖性缓存与否）的框架的用户百分比有很大关系。与当前使用情况相比，工作计数是延迟曲线。老实说，我已经在框架比较文章中看到过相同的问题方法，所以我只需要在这里指出它。更相关的用户数指标是Chrome devtools扩展的每周活跃用户（React，Vue，Angular）） - React团队还选择在其ReactConf主题演讲中使用它作为用户计数指示器，但由于扩展名不是“官方”，因此Angular数字的准确性要低得多。</p><p>3、再一次，我厌倦了看到像这样的文章宣传“学习最主要的框架”，以便人们可以购买作者的指导服务 - 这是一个有兴趣的派对的公然营销。对于读这篇文章的人：不要根据思想领袖的观点选择框架来学习。全部尝试，权衡您的优先级（技术要求，符合您的品味的API，获得工作的重要性等）并做出自己的决定</p><p><strong>作者回复：</strong></p><p>Hi Evan</p><p>感谢您的深思熟虑，并祝贺您在Vue.js取得的巨大进步。</p><p>1、对不起。我在这些句子中谈论的是React vs Angular，并不打算贬低Vue的出色用户满意度。保持伟大的工作！我澄清了有问题的句子。</p><p>2、我没有使用“关键字”搜索趋势，因为你是对的。他们提供了许多误报。但是，当你切换到主题时，那些误报几乎消失了，数据变得足够干净，可以用于像这样的高级概述。RE：npm计数 - 一旦项目变得足够大，使用量就会在整个生态系统中分散，并且这些影响会更均匀地应用于所有顶级框架。如果你的人数不足，那只是因为它的使用尚未充分分散，无法从平均效应中受益 - 这只能加强其他人占有优势的地步。至于“与FB /谷歌的内部使用有很多关系”的其他数字 - 你有没有提到支持这种说法？Re：工作计数，是的，它是一个延迟曲线，Vue.js是块上的新孩子，所以是的，近期，而不是2020年.RE：devtools，这是一个非常冒险的指标，因为许多用户根本不使用它们，而且有些项目比其他项目更好地传授他们的devtools。我们可以整天讨论各种指标的相对优点，但本文的底线是工作规则，其他一切只是“哦，这里有一些其他有趣的数据，所以我们可以证实相对的工作列表数字”。你提出了一些读者应该记住的有趣观点，但为了本文的目的，我坚持使用我的数字。</p><p>3、如果Vue.js继续增长并设法赶上，我也会报告。事实上，如果主导框架非常好，（在这种情况下），首先学习它对求职者来说是一个非常好的高投资回报率策略。这只是一个事实，没有任何个人偏见会改变它。如果您对我的培训有所了解，您会发现我的风格是教授超越特定框架的原则，甚至适用于使用完全不同的语言。我对React生态系统没有强烈的既得利益，我坚持这里的建议。</p><h2 id="JavaScript基础知识"><a href="#JavaScript基础知识" class="headerlink" title="JavaScript基础知识"></a>JavaScript基础知识</h2><p>我每年都这么说：关注基本原理。今年你将得到一些额外的帮助。所有软件开发都是组合：将复杂问题分解为更小问题的行为，并为这些较小问题组成解决方案以形成您的应用程序。</p><p>但是当我向JavaScript受访者询问软件工程中最基本的问题，“什么是函数组合？”和“什么是对象组合？”时，他们几乎总是无法回答问题，即使他们每天都这样做。</p><p>我一直以为这是一个非常严重的问题必须解决，所以我写了一本关于这个主题的书：“Composing Software”（<a href="https://leanpub.com/composingsoftware）。" target="_blank" rel="noopener">https://leanpub.com/composingsoftware）。</a></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/29/16898c76fce6d38a?w=671&amp;h=162&amp;f=png&amp;s=12382" alt=""></p><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>TypeScript在2018年继续增长，并且它继续被高估，因为类型安全似乎不是真实的东西（似乎没有太多减少生产错误密度），并且在没有TypeScript帮助的情况下在JavaScript中进行类型推断确实非常好。您甚至可以使用TypeScript引擎使用Visual Studio Code在普通JavaScript中获取类型推断。或者为您喜欢的编辑器安装Tern.js插件。</p><p>对于大多数高阶函数，TypeScript在其表面上继续平坦。也许我只是不知道如何正确使用它（经过多年的定期生活 - 在这种情况下，他们真的需要提高可用性，文档，或两者兼而有之），但我仍然不知道如何正确使用它在TypeScript中输入地图操作，它似乎无视传感器中发生的任何事情。它无法捕获错误，并经常抱怨根本不是错误的错误。</p><p>它不够灵活或功能不足以支持我对软件的看法。但我仍然抱有希望，有一天它会添加我们需要的功能，因为在尝试将它用于真实项目时，尽管它的缺点令我感到沮丧，但我也很喜欢能够正确（和有选择地）使用它的潜力当它真的有用时输入东西。</p><p>我目前的评价：在非常有限的使用案例中非常酷，但对于大型制作应用程序而言，高估，笨拙且投资回报率非常低。具有讽刺意味的是，因为TypeScript将自己称为“可扩展的JavaScript”。也许他们应该添加一个词：“笨拙地扩展的JavaScript。”</p><p>我们对JavaScript的需求是在Haskell之后建模的类型系统，而在Java之后则更少。</p><h2 id="其他组要学习的JavaScript技术"><a href="#其他组要学习的JavaScript技术" class="headerlink" title="其他组要学习的JavaScript技术"></a>其他组要学习的JavaScript技术</h2><ul><li>GraphQL来查询服务</li><li>Redux管理应用程序状态</li><li>redux-saga可以隔离副作用</li><li>react-feature-toggles可以轻松实现持续交付和测试</li><li>RITEway用于精美可读的单元测试</li></ul><h2 id="加密行业的崛起"><a href="#加密行业的崛起" class="headerlink" title="加密行业的崛起"></a>加密行业的崛起</h2><p>去年我预测区块链和fin-tech技术将成为2018年值得关注的重要技术。这一预测很明显。2017-2018的主要主题之一是加密的兴起和建立价值互联网的基础。记住这句话。很快你就会听到很多。</p><p>如果你像我一样，自从P2P爆炸以来你一直在关注分散的应用程序，这已经很长时间了。现在，比特币点燃了导火索并展示了分散式应用程序如何使用加密货币自我维持，爆炸是不可阻挡的。</p><p>比特币在短短几年内增长了几个数量级。你可能听说2018年是一个“加密的冬天”，并且认为加密行业遇到了一些麻烦。这完全是胡说八道。真正发生的事情是在2017年底，比特币在史诗般的指数增长曲线中再次触及10倍，并且市场有所回落，每当比特币市值增长10倍时就会出现这种情况。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/29/16898d10aa4e9a1f?w=800&amp;h=340&amp;f=png&amp;s=37383" alt=""></p><p>在此图表中，每个箭头从另一个10倍点开始，并指向价格修正的低点。</p><p>加密ICO（初始硬币产品）的筹款在2018年初达到顶峰，2017-2018融资泡沫带来了新的就业机会涌入生态系统，在2018年1月达到了超过1万个空缺职位。它已经恢复到大约2,400个（根据Indeed.com），但我们还很早，这个派对刚刚开始。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/29/16898d167d85375e?w=800&amp;h=471&amp;f=png&amp;s=60017" alt=""></p><p>关于新兴的加密行业还有很多话要说，但那是另一篇博客文章。如果您有兴趣，请阅读“Blockchain Platforms and Tech to Watch in 2019”（<a href="https://medium.com/the-challenge/blockchain-platforms-tech-to-watch-in-2019-f2bfefc5c23）" target="_blank" rel="noopener">https://medium.com/the-challenge/blockchain-platforms-tech-to-watch-in-2019-f2bfefc5c23）</a>.</p><h2 id="其他技术观察"><a href="#其他技术观察" class="headerlink" title="其他技术观察"></a>其他技术观察</h2><p>正如去年预测的那样，这些技术在2018年继续爆炸：</p><p>人工智能/机器学习正在全面展开2018年结束时的30,000个开放式工作，深度假货，令人难以置信的生成艺术，来自Adobe等公司研究团队的惊人视频编辑功能 - 从未有过更激动人心的时间来探索AI。</p><p>渐进式Web应用程序正在迅速成为现代Web应用程序的正确构建方式 - 增加了Google，Apple，Microsoft，Amazon等的功能和支持。令人难以置信的是，我将手机上的PWA视为理所当然。例如，我的手机上没有安装Twitter Android应用程序了。我专门使用Twitter PWA。</p><p>AR（增强现实）VR（虚拟现实）MR（混合现实）全部聚集在一起，像Voltron一样成为XR（eXtended Realty）。全职XR沉浸的未来即将来临。我预计在5到10年内大规模采用消费者XR眼镜。内部隐形眼镜2018年开辟了数千个新工作岗位，这个行业将在2019年继续爆发。</p><p>有兴趣的可以观看此视频：<a href="https://youtu.be/JaiLJSyKQHk" target="_blank" rel="noopener">https://youtu.be/JaiLJSyKQHk</a></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/29/16898d3fc68ade10?w=706&amp;h=400&amp;f=png&amp;s=263463" alt=""></p><p><strong>机器人</strong>，无人驾驶飞机和<strong>自动驾驶汽车</strong>自主飞行无人机已经在这里，自动机器人不断改进，更多的自动驾驶汽车在2018年底与我们分享道路。这些技术将继续发展并重塑我们周围的世界到2019年并进入未来20年。</p><p>正如预测的那样，<strong>量子计算</strong>在2018年取得了令人钦佩的进展，而且正如预测的那样，它还没有成为主流。事实上，我的预测，“它可能是2019年或之前的中断真正开始”可能非常乐观。</p><p>密码空间的研究人员对量子安全加密算法给予了额外的关注（量子计算将使今天许多关于计算费用昂贵的假设失效，而加密依赖于计算费用昂贵的东西），但尽管不断涌现有趣的研究进展在2018年，最近的报告提出了一些观点：</p><blockquote><p>“量子计算在2000年至2017年期间已经在Gartner的炒作名单上进行了11次，每次都在炒作周期的最早阶段列出，并且每次都被称为超过十年。”</p></blockquote><p>这让我想起早期的人工智能工作，这种工作在20世纪50年代开始升温，在1980年代和1990年代取得了有限但有趣的成功，但仅仅在2010年开始变得非常令人兴奋。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/29/16898d7dc38d1998?w=739&amp;h=265&amp;f=png&amp;s=14337" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/picblog/2019kuangjia.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="大前端" scheme="http://aemple.top/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>JS漫威--requestAnimationFrame</title>
    <link href="http://aemple.top/2018/11/19/requestAnimationFrame/"/>
    <id>http://aemple.top/2018/11/19/requestAnimationFrame/</id>
    <published>2018-11-19T01:26:18.000Z</published>
    <updated>2018-11-28T10:39:53.851Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/picblog/request.png" alt="图片"></p><a id="more"></a> <h2 id="日常前戏"><a href="#日常前戏" class="headerlink" title="日常前戏"></a>日常前戏</h2><p><strong>不知道你有没有遇到过以下问题</strong></p><ul><li>不知道<code>setTimeout</code>该设置多大时间好？算了，蒙一个吧！</li><li>如何渲染几万条数据并不卡住界面？嗯…..懒加载</li><li>做动画有需要循环间隔必须足够短，这样才能让不同的动画效果显得平滑流畅；另一方面，循环间隔还要足够长，这样才能确保浏览器有能力渲染产生的变化。</li><li>. . . . . . .</li></ul><p><code>想知道更好的答案，来到我房间咱们相互深入了解一下（贱贱的小眼神）</code></p><h2 id="requestAnimationFrame是个啥玩意？"><a href="#requestAnimationFrame是个啥玩意？" class="headerlink" title="requestAnimationFrame是个啥玩意？"></a>requestAnimationFrame是个啥玩意？</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestAnimationFrame是浏览器用于定时循环操作的一个接口，类似于<span class="built_in">setTimeout</span>，主要用途是按帧对网页进行重绘</span><br></pre></td></tr></table></figure><h2 id="为什么需要requestAnimationFrame这玩意，setTimeout做动画不好吗？css动画不好吗？"><a href="#为什么需要requestAnimationFrame这玩意，setTimeout做动画不好吗？css动画不好吗？" class="headerlink" title="为什么需要requestAnimationFrame这玩意，setTimeout做动画不好吗？css动画不好吗？"></a>为什么需要<code>requestAnimationFrame</code>这玩意，<code>setTimeout</code>做动画不好吗？<code>css</code>动画不好吗？</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">css实现的动画的优势就是浏览器知道动画的开始及每一帧的循环间隔，能够在恰当的时间刷新UI，给用户一种流畅的体验</span><br><span class="line"></span><br><span class="line">但是`css`动画并不能很精确的人为控制。而`setInterval`或`setTimeout`实现的JavaScript动画虽然可以精确的控制，但是却并不可靠了</span><br><span class="line"></span><br><span class="line">他不能自己精确计算出指向动画的时间，因为浏览器压根就无法保证每一帧渲染的时间间隔，一般情况下，每秒平均刷新次数能够达到<span class="number">60</span>帧，</span><br><span class="line"></span><br><span class="line">就能够给人流畅的体验，即每过 <span class="number">1000</span>/<span class="number">60</span> 毫秒渲染新一帧即可。但是这事一般情况！</span><br></pre></td></tr></table></figure><h3 id="因此requestAnimationFrame应运而生-他能自己随着浏览器的刷新机制指定自己执行动画的恰当时间（一般浏览器的显示帧率是60fps，差不多每帧间隔16-7ms）来看看阮大大的解释："><a href="#因此requestAnimationFrame应运而生-他能自己随着浏览器的刷新机制指定自己执行动画的恰当时间（一般浏览器的显示帧率是60fps，差不多每帧间隔16-7ms）来看看阮大大的解释：" class="headerlink" title="因此requestAnimationFrame应运而生,他能自己随着浏览器的刷新机制指定自己执行动画的恰当时间（一般浏览器的显示帧率是60fps，差不多每帧间隔16.7ms）来看看阮大大的解释："></a>因此<code>requestAnimationFrame</code>应运而生,他能自己随着浏览器的刷新机制指定自己执行动画的恰当时间（一般浏览器的显示帧率是60fps，差不多每帧间隔16.7ms）来看看阮大大的解释：</h3><blockquote><p>设置这个API的目的是为了让各种网页动画效果（DOM动画、Canvas动画、SVG动画、WebGL动画）能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。代码中使用这个API，就是告诉浏览器希望执行一个动画，让浏览器在下一个动画帧安排一次网页重绘。<br>requestAnimationFrame的优势，在于充分利用显示器的刷新机制，比较节省系统资源。显示器有固定的刷新频率（60Hz或75Hz），也就是说，每秒最多只能重绘60次或75次，requestAnimationFrame的基本思想就是与这个刷新频率保持同步，利用这个刷新频率进行页面重绘。此外，使用这个API，一旦页面不处于浏览器的当前标签，就会自动停止刷新。这就节省了CPU、GPU和电力<br>不过有一点需要注意，requestAnimationFrame是在主线程上完成。这意味着，如果主线程非常繁忙，requestAnimationFrame的动画效果会大打折扣。</p></blockquote><h2 id="说了这么多，下面来看看它怎么用"><a href="#说了这么多，下面来看看它怎么用" class="headerlink" title="说了这么多，下面来看看它怎么用"></a>说了这么多，下面来看看它怎么用</h2><p><strong>API</strong><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">window</span><span class="selector-class">.requestAnimationFrame</span>(callback);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">callback</span></span><br><span class="line">一个指定函数的参数，该函数在下次重新绘制动画时调用。这个回调函数只有一个传参，<span class="selector-tag">DOMHighResTimeStamp</span>，指示<span class="selector-tag">requestAnimationFrame</span>() 开始触发回调函数的当前时间（<span class="selector-tag">performance</span><span class="selector-class">.now</span>() 返回的时间）。</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line">一个 <span class="selector-tag">long</span> 整数，请求 <span class="selector-tag">ID</span> ，是回调列表中唯一的标识。是个非零值，没别的意义。你可以传这个值给 <span class="selector-tag">window</span><span class="selector-class">.cancelAnimationFrame</span>() 以取消回调函数。</span><br></pre></td></tr></table></figure></p><p>下面看一个使用例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animationWidth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">  div.style.width = <span class="built_in">parseInt</span>(div.style.width) + <span class="number">1</span> + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">parseInt</span>(div.style.width) &lt; <span class="number">200</span>) &#123;</span><br><span class="line">    requestAnimationFrame(animationWidth)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">requestAnimationFrame(animationWidth);</span><br></pre></td></tr></table></figure><p>这个例子可以平滑的增大宽度（个人感觉有点像递归的感觉）</p><p>还想看其他例子请到 <a href="https://www.w3cplus.com/javascript/requestAnimationFrame.html" target="_blank" rel="noopener">例子一：来源大漠</a><br><a href="https://segmentfault.com/a/1190000004039023" target="_blank" rel="noopener">例子二：来源思否</a>他们都对setTimeout和requestAnimationFrame做了对比实验。很直观！！！</p><h3 id="最后来回答文章开始的问题"><a href="#最后来回答文章开始的问题" class="headerlink" title="最后来回答文章开始的问题"></a>最后来回答文章开始的问题</h3><ul><li>不知道<code>setTimeout</code>该设置多大时间好？requestAnimationFrame自动调节玮最佳</li><li><p>如何渲染几万条数据并不卡住界面？通过 requestAnimationFrame 来每 16 ms 刷新一次,请看下面代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 插入十万条数据</span></span><br><span class="line">      <span class="keyword">const</span> total = <span class="number">100000</span></span><br><span class="line">      <span class="comment">// 一次插入 20 条，如果觉得性能不好就减少</span></span><br><span class="line">      <span class="keyword">const</span> once = <span class="number">20</span></span><br><span class="line">      <span class="comment">// 渲染数据总共需要几次</span></span><br><span class="line">      <span class="keyword">const</span> loopCount = total / once</span><br><span class="line">      <span class="keyword">let</span> countOfRender = <span class="number">0</span></span><br><span class="line">      <span class="keyword">let</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">"ul"</span>);</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 优化性能，插入不会造成回流</span></span><br><span class="line">        <span class="keyword">const</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; once; i++) &#123;</span><br><span class="line">          <span class="keyword">const</span> li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">          li.innerText = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * total);</span><br><span class="line">          fragment.appendChild(li);</span><br><span class="line">        &#125;</span><br><span class="line">        ul.appendChild(fragment);</span><br><span class="line">        countOfRender += <span class="number">1</span>;</span><br><span class="line">        loop();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (countOfRender &lt; loopCount) &#123;</span><br><span class="line">          <span class="built_in">window</span>.requestAnimationFrame(add);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      loop();</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>做动画有需要循环间隔必须足够短，这样才能让不同的动画效果显得平滑流畅；另一方面，循环间隔还要足够长，这样才能确保浏览器有能力渲染产生的变化。</p></li><li>. . . . . . .</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/picblog/request.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://aemple.top/categories/JavaScript/"/>
    
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>从零开始使用 Webpack 4 和 Babel 7 搭建 React 开发环境(1)</title>
    <link href="http://aemple.top/2018/11/16/webpack-react/"/>
    <id>http://aemple.top/2018/11/16/webpack-react/</id>
    <published>2018-11-16T02:13:25.000Z</published>
    <updated>2018-11-28T11:30:13.129Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/picblog/webpack-react.png" alt="图片"></p><a id="more"></a> <h2 id="这一次搭建的是最简单的运行环境-后续将会升入"><a href="#这一次搭建的是最简单的运行环境-后续将会升入" class="headerlink" title="这一次搭建的是最简单的运行环境 后续将会升入"></a>这一次搭建的是最简单的运行环境 后续将会升入</h2><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul><li>创建一个文件夹</li><li>npm init  </li><li>npm install webpack webpack-cli –save-dev    //这些都是webpack核心包</li><li>编译器打开文件夹<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2></li><li>打开package.json</li><li>修改script为 “dev”:”webpack –mode development” //用npm run start就是运行webpack的意思 <strong>ps</strong>如果出现找不到命令的情况请先 npm install -g webpack！<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2></li><li>npm install @babel/core  babel-loader  @babel/preset-env @babel/preset-react –save-dev</li><li>@babel/core  babel-loader 核心包   @babel/preset-env  es6+变为es5  @babel/preset-react 解析react语法 </li><li>为啥加@ 为了把他们都安装在babel文件夹下<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><h3 id="创建一个-bablerc文件-指定你要用哪些babel解析规则"><a href="#创建一个-bablerc文件-指定你要用哪些babel解析规则" class="headerlink" title="创建一个.bablerc文件(指定你要用哪些babel解析规则)"></a>创建一个.bablerc文件(指定你要用哪些babel解析规则)</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"@babel/preset-env"</span>, <span class="string">"@babel/preset-react"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建一个webpack-config-js"><a href="#创建一个webpack-config-js" class="headerlink" title="创建一个webpack.config.js"></a>创建一个webpack.config.js</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">//使用插件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="keyword">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js/</span>,匹配.js后缀的文件</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,排除这个文件夹不打包</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">"babel-loader"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [ </span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">"src/index.html"</span>,匹配的模板</span><br><span class="line">      filename: <span class="string">"index.html"</span>输出文件名</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><h3 id="现在就是写react啦-记得安装react-react-dom"><a href="#现在就是写react啦-记得安装react-react-dom" class="headerlink" title="现在就是写react啦 记得安装react react-dom"></a>现在就是写react啦 记得安装react react-dom</h3><ul><li><p>src/index.js</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> FormContainer <span class="keyword">from</span> <span class="string">'./components/FormContainer'</span>;</span><br><span class="line"></span><br><span class="line">ReactDom.render(&lt;FormContainer /&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure></li><li><p>src/index.html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>src/components/FormContainer.js</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> <span class="type">Input</span> from './<span class="type">Input</span>';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormContainer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      title: <span class="symbol">'hell</span>o'</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form id=<span class="string">"article-form"</span>&gt;</span><br><span class="line">        &lt;<span class="type">Input</span> title=&#123; <span class="keyword">this</span>.state.title &#125; /&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="type">FormContainer</span>;</span><br></pre></td></tr></table></figure></li></ul><p>src/components/Input.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Input = <span class="function">(<span class="params">&#123; title &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;&#123; title &#125; world&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Input.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  title: PropTypes.string.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Input;</span></span><br></pre></td></tr></table></figure></p><h3 id="现在再来npm-run-dev-就ok啦-打包出了一个文件"><a href="#现在再来npm-run-dev-就ok啦-打包出了一个文件" class="headerlink" title="现在再来npm run dev 就ok啦 打包出了一个文件"></a>现在再来npm run dev 就ok啦 打包出了一个文件</h3><h2 id="但是现在每次都要手动重新打包-很累"><a href="#但是现在每次都要手动重新打包-很累" class="headerlink" title="但是现在每次都要手动重新打包 很累"></a>但是现在每次都要手动重新打包 很累</h2><ul><li>安装插件 webpack-dev-server <ul><li>为package.js文件夹中script增加一行 “start”:”webpack-dev-server –open –mode development” </li></ul></li></ul><h3 id="这样编译完了就能自动打开浏览器窗口-还可以修改后自动打包编译"><a href="#这样编译完了就能自动打开浏览器窗口-还可以修改后自动打包编译" class="headerlink" title="这样编译完了就能自动打开浏览器窗口 还可以修改后自动打包编译"></a>这样编译完了就能自动打开浏览器窗口 还可以修改后自动打包编译</h3><h2 id="好啦-这样就完成了一个最简单的react开发环境配置"><a href="#好啦-这样就完成了一个最简单的react开发环境配置" class="headerlink" title="好啦 这样就完成了一个最简单的react开发环境配置"></a>好啦 这样就完成了一个最简单的react开发环境配置</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/picblog/webpack-react.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://aemple.top/categories/React/"/>
    
    
      <category term="导航" scheme="http://aemple.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Http1.0/Http1.1/Http2.0/Https</title>
    <link href="http://aemple.top/2018/06/08/http/"/>
    <id>http://aemple.top/2018/06/08/http/</id>
    <published>2018-06-08T04:27:03.000Z</published>
    <updated>2018-11-11T09:32:36.724Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/picblog/http-1.png" alt="图片"></p><a id="more"></a><h2 id="首先来看看Http的发展（此图来自-code小生）"><a href="#首先来看看Http的发展（此图来自-code小生）" class="headerlink" title="首先来看看Http的发展（此图来自 code小生）"></a>首先来看看Http的发展（此图来自 code小生）</h2><p><img src="/images/picblog/http-2.png" alt="图片"><br>HTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上，而HTTP1.1则在1999年才开始广泛应用于现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议，最后一个就是2015年发布的http2.0。</p><hr><hr><hr><h2 id="HTTP-1-0-→-HTTP-1-1"><a href="#HTTP-1-0-→-HTTP-1-1" class="headerlink" title="HTTP 1.0 → HTTP 1.1"></a>HTTP 1.0 → HTTP 1.1</h2><h3 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a><em>长连接</em></h3><p><strong>HTTP 1.1</strong>默认支持长连接，减少了TCP连接次数，节约开销。</p><p><strong>HTTP 1.0</strong>所保持的TCP每次只能处理一个请求，最典型的就是pipline管线化模型，虽然能一次性接收多个请求，但是还是得按顺序一次处理一个请求，这样很容易造成后续请求等待前序请求完成，造成阻塞，也就是我们常说的”线头阻塞”。</p><p><strong>总结：HTTP 1.0需要使用keep-alive参数来告知服务器建立长连接，而HTTP 1.1默认支持长连接，减少了TCP连接次数，减少了开销和延迟！！！</strong></p><h3 id="缓存"><a href="#缓存" class="headerlink" title="_缓存_"></a>_缓存_</h3><p><strong>HTTP1.0</strong>中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准。</p><p><strong>HTTP1.1</strong>则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略</p><h3 id="新增状态码："><a href="#新增状态码：" class="headerlink" title="新增状态码："></a><em>新增状态码</em>：</h3><p><strong>HTTP1.1</strong> 中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删！</p><h3 id="http1-1带宽优化"><a href="#http1-1带宽优化" class="headerlink" title="http1.1带宽优化"></a><em>http1.1带宽优化</em></h3><p><strong>HTTP 1.1</strong>支持只发送header信息(不带任何body信息)，如果服务器认为客户端有权限请求服务器，则返回100，否则返回401。客户端如果接受到100，才开始把请求body发送到服务器。这样当服务器返回401的时候，客户端就可以不用发送请求body了，节约了带宽。另外HTTP还支持传送内容的一部分。这样当客户端已经有一部分的资源后，只需要跟服务器请求另外的部分资源即可。这是支持文件断点续传的基础。HTTP1.1在请求头引入了<strong>range</strong>头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。<br><img src="/images/picblog/http-3.png" alt="图片"></p><h3 id="HOST域"><a href="#HOST域" class="headerlink" title="HOST域"></a><em>HOST域</em></h3><p><strong>HTTP 1.1</strong>支持host域，服务端可以通过host域设置多个虚拟站点来共享一个ip和端口。因为随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。<br><strong>HTTP1.0</strong>中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）</p><hr><hr><hr><h2 id="HTTP-1-1-→-HTTP-2-0"><a href="#HTTP-1-1-→-HTTP-2-0" class="headerlink" title="HTTP 1.1 → HTTP 2.0"></a>HTTP 1.1 → HTTP 2.0</h2><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a><em>多路复用</em></h3><p><strong>HTTP 2.0</strong>使用多路复用技术，使用一个TCP连接<strong>_并发_</strong>处理多个请求，不但节约了开销而且可处理请求的数量也比HTTP 1.1大了很多。</p><blockquote><p>当然HTTP1.1也可以多建立几个TCP连接，来支持处理更多并发的请求，但是创建TCP连接本身也是有开销的。<br>TCP连接有一个预热和保护的过程，先检查数据是否传送成功，一旦成功过，则慢慢加大传输速度。因此对应瞬时并发的连接，服务器的响应就会变慢。所以最好能使用一个建立好的连接，并且这个连接可以支持瞬时并发的请求。</p></blockquote><h3 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a><em>头部压缩</em></h3><p>HTTP 1.1不支持header数据压缩，<strong>HTTP 2.0</strong>使用HPACK算法对header的数据进行压缩，使得数据传输更快。</p><h3 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a><em>服务器推送</em></h3><p>当我们对支持<strong>HTTP 2.0</strong>的服务器请求数据额时候，服务器会顺便把一些客户端需要的资源一起推送到服务器，这种方式适用于加载静态资源，节约带宽。服务器端推送的这些资源其实存在客户端的某处地方，客户端直接从本地加载这些资源就可以了，不用走网络，速度自然是快很多的。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><img src="/images/picblog/http-4.png" alt="图片"></p><hr><hr><hr><h2 id="HTTP-→-HTTPS-HTTPS-HTTP-TLS-SSL加密-认证-完整性保护-（80-443）"><a href="#HTTP-→-HTTPS-HTTPS-HTTP-TLS-SSL加密-认证-完整性保护-（80-443）" class="headerlink" title="HTTP → HTTPS     HTTPS = HTTP + TLS/SSL加密 + 认证 + 完整性保护 （80 443）"></a>HTTP → HTTPS     HTTPS = HTTP + TLS/SSL加密 + 认证 + 完整性保护 （80 443）</h2><p><img src="/images/picblog/http-6.png" alt="图片"><br>在讲 HTTPS 之前，我们先来看看 HTTP 有哪些不足：</p><ul><li>使用明文通信，内容可能会被窃听</li><li>不验证通信双方身份，有可能遭遇伪装</li><li>无法证明报文的完整性，内容可能遭到篡改</li></ul><p>为了解决这些不足，所以HTTPS 应运而生，先看看https的特性：</p><ul><li>TLS/SSL内容加密</li><li>数字证书(CA)验明身份: 防范中间人攻击</li><li>MD5、SHA-1等散列值方法防止信息篡改（中间人攻击：运营商等）</li></ul><h3 id="先来谈谈“对称加密”和“非对称加密”的概念"><a href="#先来谈谈“对称加密”和“非对称加密”的概念" class="headerlink" title="先来谈谈“对称加密”和“非对称加密”的概念"></a>先来谈谈“对称加密”和“非对称加密”的概念</h3><h4 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h4><blockquote><p>所谓的“对称加密技术”，意思就是说：“加密”和“解密”使用相同的密钥。这个比较好理解，就好比你用 7zip 或 WinRAR 创建一个带密码（口令）的加密压缩包，当你下次要把这个压缩文件解开的时候，你需要输入同样的密码，在这个例子中，密码/口令就如同刚才说的“密钥”。</p></blockquote><blockquote><p><strong>对称加密是最快速、最简单的一种加密方式</strong>，加密（encryption）与解密（decryption）用的是同样的密钥（secret key），这种方法在密码学中叫做对称加密算法，对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。</p></blockquote><h4 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h4><blockquote><p>所谓的“非对称加密技术”，意思就是说：<strong>“加密”和“解密”使用不同的密钥</strong>，这玩意儿比较难理解，也比较难想到，当年“非对称加密”的发明，还被誉为“密码学”历史上的一次革命。<br>非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public key）和私钥（private key），私钥只能由一方安全保管，不能外泄，而公钥则可以发给任何请求它的人，非对称加密使用这对密钥中的一个进行加密，而解密则需要另一个密钥。</p></blockquote><h4 id="总结：非对称相对更安全，但是性能要求更高！"><a href="#总结：非对称相对更安全，但是性能要求更高！" class="headerlink" title="总结：非对称相对更安全，但是性能要求更高！"></a>总结：非对称相对更安全，但是性能要求更高！</h4><h3 id="https加密方式"><a href="#https加密方式" class="headerlink" title="https加密方式"></a>https加密方式</h3><p>虽然TLS/SSL采用公开密钥这种非对称加密方式，但是HTTPS并不是全部使用非对称加密，而是使用混合加密方式，即：<strong>公开密钥(非对称加密)+共享密钥(对称加密)</strong></p><p>因为公开密钥与共享密钥加密相比，其处理速度要慢很多。所以HTTPS冲锋利用了两者各自的优势，将多种方法组合起来用于通信。<em><strong>https在交换密钥环节使用公开密钥加密方式，之后建立的通信交换报文阶段则使用共享密钥加密方式</strong></em><br><img src="/images/picblog/http-5.png" alt="图片"></p><h3 id="证明公开密钥的正确性的证书"><a href="#证明公开密钥的正确性的证书" class="headerlink" title="证明公开密钥的正确性的证书"></a>证明公开密钥的正确性的证书</h3><p>遗憾的是, 公开密钥加密方式还是存在一些问题的, 那就是无法证明公开密钥本身就是货真价实的公开密钥. 比如, 正准备和某台服务器建立公开密钥加密方式下的通信时, 如何证明收到的公开密钥就是原本预想的那台服务器发行的公开密钥. 或许在公开密钥传输途中, 真正的公开密钥已经被攻击者替换了.</p><p>为了解决上述问题, 可以使用有<strong>数字证书认证机构（CA）</strong>和<strong>其他相关机关颁发的公开密钥证书</strong></p><p>基本流程为:</p><ul><li>1.服务器把自己的公开密钥登录至数字证书认证机构</li><li>2.数字证书认证机构用自己的私有密钥向服务器的公开密钥署数字签名并颁发公钥证书</li><li>3.客户端拿到服务器的公钥证书后, 使用数字证书认证机构的公开密钥, 向数字证书认证机构验证公钥证书上的数字签名, 以确认服务器的公开密钥的真实性</li><li>4.使用服务器的公开密钥对报文加密后发送</li><li>5.服务器用私有密钥对报文解密</li></ul><h3 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h3><p>通常我们会认为，使用HTTPS会导致网站加载速度变慢。实际上，只要我们合理优化使用HTTPS过程，使用HTTPS可能会比使用HTTP还快！<br><strong>使用HTTPS相比于HTTP所增加的延迟点：</strong></p><ul><li><p>HTTP 302 跳转到 HTTPS 的耗时</p></li><li><p>CPU 进行 RSA 加解密运算的耗时</p></li><li><p>请求和验证 CA 所花的时间</p></li></ul><p><strong>优化方式：</strong></p><ul><li><p>使用 HSTS 技术，去掉从80跳转到443的跳转(HSTS使用的是内部307跳转技术，不会产生多余的网络请求) PS：302 和 307 效果相同，只是307强制使用post</p></li><li><p>使用专门的加解密硬件处理加解密，减轻CPU负担。这样不仅减少了处理时间，所能承受的qps也会增加。</p></li><li><p>减少证书链，减少 CA 请求时间</p></li><li><p>session复用，减少建立连接的次数</p></li></ul><h3 id="为什么不都使用https"><a href="#为什么不都使用https" class="headerlink" title="为什么不都使用https"></a>为什么不都使用https</h3><ul><li>性能问题</li><li>金钱问题</li></ul><blockquote><p>参考<br><a href="https://www.cnblogs.com/heluan/p/8620312.html" target="_blank" rel="noopener">HTTP1.0、HTTP1.1 和 HTTP2.0 的区别</a><br><a href="http://www.mahaixiang.cn/internet/1522.html" target="_blank" rel="noopener">HTTP、SSL/TLS和HTTPS协议的区别与联系</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/picblog/http-1.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="http://aemple.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>《高新能javascript》学习笔记</title>
    <link href="http://aemple.top/2018/05/03/note-gxn/"/>
    <id>http://aemple.top/2018/05/03/note-gxn/</id>
    <published>2018-05-03T04:25:45.000Z</published>
    <updated>2018-11-23T08:29:42.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是在学习《高新能javascript》的时候做的总结"><a href="#这是在学习《高新能javascript》的时候做的总结" class="headerlink" title="这是在学习《高新能javascript》的时候做的总结"></a>这是在学习《高新能javascript》的时候做的总结</h2><p><img src="/images/picblog/note-gxn.png" alt="图片"></p><h3 id="不够清晰-有需要的可以联系我-发xmind文件"><a href="#不够清晰-有需要的可以联系我-发xmind文件" class="headerlink" title="不够清晰 有需要的可以联系我 发xmind文件"></a>不够清晰 有需要的可以联系我 发xmind文件</h3><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;这是在学习《高新能javascript》的时候做的总结&quot;&gt;&lt;a href=&quot;#这是在学习《高新能javascript》的时候做的总结&quot; class=&quot;headerlink&quot; title=&quot;这是在学习《高新能javascript》的时候做的总结&quot;&gt;&lt;/a&gt;这是在学习《高新能javascript》的时候做的总结&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/picblog/note-gxn.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;不够清晰-有需要的可以联系我-发xmind文件&quot;&gt;&lt;a href=&quot;#不够清晰-有需要的可以联系我-发xmind文件&quot; class=&quot;headerlink&quot; title=&quot;不够清晰 有需要的可以联系我 发xmind文件&quot;&gt;&lt;/a&gt;不够清晰 有需要的可以联系我 发xmind文件&lt;/h3&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="http://aemple.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Vue CLI使用scss</title>
    <link href="http://aemple.top/2018/04/12/vue/"/>
    <id>http://aemple.top/2018/04/12/vue/</id>
    <published>2018-04-12T02:13:25.000Z</published>
    <updated>2018-11-04T06:35:56.271Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/picblog/VUE-SCSS.png" alt="图片"></p><h2 id="在Vue-CLI脚手架中使用scss"><a href="#在Vue-CLI脚手架中使用scss" class="headerlink" title="在Vue CLI脚手架中使用scss"></a>在Vue CLI脚手架中使用scss</h2><p>今天学习vue当中遇到了如何配置scss的问题经过查证，写出记录。</p><p><code>第一步:</code></p><p>npm install sass-loader node-sass</p><a id="more"></a> <p>或者</p><p>yarn add sass-loader node-sass</p><blockquote><p>如果node-sass在Windows中安装失败(需要Python和C++构建工具），大家可以使用cnpm单独安装node-sass</p></blockquote><p><code>第二步:</code></p><p>在vue文件中使用</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">lang</span>=<span class="string">'scss'</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line">![<span class="string">scss</span>](<span class="link">https://tse4-mm.cn.bing.net/th?id=OIP.HuHbi6D0rpzsTenMxWgfXgHaFj&amp;w=253&amp;h=184&amp;c=7&amp;o=5&amp;pid=1.7</span>)</span><br><span class="line"><span class="section">#app &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        @import  url('./assets/aaa.scss'); // 引入单独的scss文件</span></span><br><span class="line"></span><br><span class="line"><span class="code">        font-family: 'Avenir', Helvetica, Arial, sans-serif;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        -webkit-font-smoothing: antialiased;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        -moz-osx-font-smoothing: grayscale;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        text-align: center;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        color: #2c3e50;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        margin-top: 60px;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="这样就很愉快的完成了！"><a href="#这样就很愉快的完成了！" class="headerlink" title="这样就很愉快的完成了！"></a>这样就很愉快的完成了！</h4><h4 id="使用Sass同理"><a href="#使用Sass同理" class="headerlink" title="使用Sass同理"></a>使用Sass同理</h4><p><code>## Sass使用</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/picblog/VUE-SCSS.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在Vue-CLI脚手架中使用scss&quot;&gt;&lt;a href=&quot;#在Vue-CLI脚手架中使用scss&quot; class=&quot;headerlink&quot; title=&quot;在Vue CLI脚手架中使用scss&quot;&gt;&lt;/a&gt;在Vue CLI脚手架中使用scss&lt;/h2&gt;&lt;p&gt;今天学习vue当中遇到了如何配置scss的问题经过查证，写出记录。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;第一步:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;npm install sass-loader node-sass&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://aemple.top/categories/Vue/"/>
    
    
      <category term="导航" scheme="http://aemple.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>天上便落下一粒沙，从此便有了撒哈拉--初入大学</title>
    <link href="http://aemple.top/2018/04/09/SH-1/"/>
    <id>http://aemple.top/2018/04/09/SH-1/</id>
    <published>2018-04-09T13:03:32.000Z</published>
    <updated>2018-11-04T06:40:02.514Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/picblog/sh-1.png" alt="图片"></p><a id="more"></a> <h2 id="我的大学生活"><a href="#我的大学生活" class="headerlink" title="我的大学生活"></a>我的大学生活</h2><p><img src="https://pic4.zhimg.com/v2-a9976f2c7a0a2a8e2a94a105ed24ea23_r.jpg" alt="大学"></p><h3 id="“准”大学生活"><a href="#“准”大学生活" class="headerlink" title="“准”大学生活:"></a>“准”大学生活:</h3><p>  高考后感觉身上的担子轻了，是到放松任性玩儿的时候了，于是高考后的六月七月都被我放肆的挥霍了。就在七月末的时候，突然冒出了一个奇怪的想法。</p><p>  我想去找一份工作尝试着靠自己的能力来拿到一笔完完全全属于自己的money，但当时因为暑假已经不多了，所以在寻找了大概一个星期后也没有找到合适的。最后这个挺不错的想法，也被我否定了。剩下的时间，就回到了自己的家乡，开始着手准备迎接我的大学生活。</p><p>  但回家后的生活过的也分的颓废，每天大概一两点睡差不多11点起床然后吃了饭之后可能又是躺尸啊，因为天气比较热。离去大学报到的时间越来越近了，我开始去网上寻找大学需要准备一些什么东西，然后心满意足的买了各种各样自己认为可能会需要的东西，在2016年9月2号的时候，我拖着它们来到了属于我的大学，开始了我的大学生活。</p><p>  <img src="https://pic1.zhimg.com/80/v2-5020f286c69b220d15619367b41c3010_hd.jpg" alt="开始"></p><h3 id="大学生活的开始（大一上学期）"><a href="#大学生活的开始（大一上学期）" class="headerlink" title="大学生活的开始（大一上学期）:"></a>大学生活的开始（大一上学期）:</h3><h4 id="军训"><a href="#军训" class="headerlink" title="军训"></a>军训</h4><p>  进入大学最开始的一件事可能就是军训了。我对军训的记忆就是累和放松，感到累，是因为每天要在特别热的环境下训练，不经意间，可能你还会收到教官的体罚。感到放松是因为每次休息或者教官带我们拉军歌大家一起玩，一起小游戏都会让你感觉特别的放松。</p><h4 id="社团、学生会"><a href="#社团、学生会" class="headerlink" title="社团、学生会"></a>社团、学生会</h4><p>  军训后差不多就是学生会的招募了，当时面对各种各样的学生会自己感到很迷茫，对他们都没有太多的了解。他后来抱着自己想当一名志愿者，去帮助一下别人想法。经过了一轮面试，二轮面试，试用期这几个步骤终于成为了一名青协小干事。学生会给我留下的记忆就是温暖禾迷茫。会感到温暖欣慰，学生会是一个特别大的大家庭，每个人都是互相帮助来完成这个大家庭应该去完成的事情，而且在如果说某个人过生日，大家都会一起帮你过，常一起出去玩，一起做一些小活动，所以会感觉到温暖。感动迷茫，是因为很多事情自己之前都没有接触过功能无论是在对人或者对物都遇到了很多之前没遇到过的情景。刚加入学生会去死，学到了挺多认识到了许多许多新的朋友，知道了许多做事儿做人的方法。</p><h4 id="专业方向"><a href="#专业方向" class="headerlink" title="专业方向"></a>专业方向</h4><p>加入学生会后不久学校或者学院特色的学长课堂开课了，当时我对学长课堂的各个方向基本都不太了解，在询问的几个学长之后。他们给出了我一些建议，最后选择了前端这个方向，能够选择到这个方向感觉也是人生对一种幸运，学长课堂在大二或者说大一下期仍然保留着的并不多，而就是其中一个，当时代前段的学长也不止一个到现‘在保留的却只有教我的学长还在带我们。在学长课堂的学习过程中学会的也不仅仅是一些专业知识。觉得自己更加去学会了去运用一些东西些论坛一些搜索引擎来解决问题的思想和方法。</p><h4 id="大学课堂"><a href="#大学课堂" class="headerlink" title="大学课堂"></a>大学课堂</h4><p>“自觉”是我对大学课堂的认识，在大学的课堂老司机的人不会在意你听课了，或者没有听课，老师也不会特别严苛的去检查你的任何关于学习的方面。</p><p> <img src="&#39;https://pic1.zhimg.com/80/v2-c2af705879b988e206f4be4f6638fd18_hd.png&#39;" alt="结束"></p><p> 时间很快，差不多就到一个学期就这么过去了，一直踩着好运的我也以班级第二的成绩，哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈。</p><h4 id="持续更新中···········"><a href="#持续更新中···········" class="headerlink" title="持续更新中···········"></a>持续更新中···········</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/picblog/sh-1.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://aemple.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="导航" scheme="http://aemple.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Css之正方体</title>
    <link href="http://aemple.top/2018/04/02/css-zft/"/>
    <id>http://aemple.top/2018/04/02/css-zft/</id>
    <published>2018-04-02T10:37:39.000Z</published>
    <updated>2018-11-04T07:50:35.405Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/picblog/css-zft.png" alt="图片"></p><a id="more"></a> <h2 id="最近给大一的上课，想找一篇通俗点css制作立方体的文章给他们看，实在没找到最后索性就自己写一篇吧！！！"><a href="#最近给大一的上课，想找一篇通俗点css制作立方体的文章给他们看，实在没找到最后索性就自己写一篇吧！！！" class="headerlink" title="最近给大一的上课，想找一篇通俗点css制作立方体的文章给他们看，实在没找到最后索性就自己写一篇吧！！！"></a>最近给大一的上课，想找一篇通俗点css制作立方体的文章给他们看，实在没找到最后索性就自己写一篇吧！！！</h2><h3 id="第一步：大家需要有css3的基础-没有css3基础的可以先移步这里-css3"><a href="#第一步：大家需要有css3的基础-没有css3基础的可以先移步这里-css3" class="headerlink" title="第一步：大家需要有css3的基础,没有css3基础的可以先移步这里  css3"></a><code>第一步</code>：大家需要有css3的基础,没有css3基础的可以先移步这里  <a href="http://www.runoob.com/css3/css3-tutorial.html" target="_blank" rel="noopener">css3</a></h3><h3 id="第二步：先把下图牢牢地记住"><a href="#第二步：先把下图牢牢地记住" class="headerlink" title="第二步：先把下图牢牢地记住"></a><code>第二步</code>：先把下图牢牢地记住</h3><p><img src="/images/picblog/zb.png" alt="图片"></p><h3 id="第三步：搭建页面主体结构"><a href="#第三步：搭建页面主体结构" class="headerlink" title="第三步：搭建页面主体结构"></a><code>第三步</code>：搭建页面主体结构</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"stage"</span>&gt;</span><br><span class="line">     &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"container"</span>&gt;</span><br><span class="line">         &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"face top"</span>&gt;<span class="number">1</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">         &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"face back"</span>&gt;<span class="number">2</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">         &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"face bottom"</span>&gt;<span class="number">3</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">         &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"face front"</span>&gt;<span class="number">4</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">         &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"face left"</span>&gt;<span class="number">5</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">         &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"face right"</span>&gt;<span class="number">6</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">     &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"> &lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="第四步-：编写基础css"><a href="#第四步-：编写基础css" class="headerlink" title="第四步 ：编写基础css"></a><code>第四步</code> ：编写基础css</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">       <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">padding</span>: <span class="number">0</span>; <span class="comment">//清除默认样式</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="selector-class">.stage</span> &#123;</span><br><span class="line">       <span class="attribute">position</span>: relative; <span class="comment">//让子元素相对父元素定位</span></span><br><span class="line">       <span class="attribute">margin</span>: <span class="number">300px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">300px</span>;</span><br><span class="line">       <span class="attribute">perspective</span>: <span class="number">800px</span>;<span class="comment">//css3动画属性</span></span><br><span class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="selector-class">.container</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">position</span>: absolute;<span class="comment">//让自己可以相对父元素定位</span></span><br><span class="line">       <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;<span class="comment">//css3动画属性</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="selector-class">.face</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">       <span class="attribute">position</span>: absolute;<span class="comment">//让自己可以相对父元素定位，并达到六个div重合效果</span></span><br><span class="line">       <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">text-align</span>: center;<span class="comment">//字水平居中</span></span><br><span class="line">       <span class="attribute">line-height</span>: <span class="number">200px</span>;<span class="comment">//字垂直居中</span></span><br><span class="line">       <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">       <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">       <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">       <span class="attribute">opacity</span>: <span class="number">0.6</span>;<span class="comment">//设置透明度方便观察效果</span></span><br><span class="line">       <span class="attribute">background</span>: <span class="number">#999</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>下面看看现在的效果 六个div重合在一起了<br><img src="/images/picblog/css-zft1.png" alt="图片"></p><h3 id="第五步：把每个div盒子定位到它应该在的地方"><a href="#第五步：把每个div盒子定位到它应该在的地方" class="headerlink" title="第五步：把每个div盒子定位到它应该在的地方"></a><code>第五步</code>：把每个div盒子定位到它应该在的地方</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">         <span class="attribute">color</span>: aqua;<span class="comment">//设置字体颜色方便观察</span></span><br><span class="line">         <span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>) translateZ(<span class="number">100px</span>); </span><br><span class="line">         <span class="comment">//这里就是重点了 现在回想刚才记住的坐标图   我们先绕X旋转90度</span></span><br><span class="line">         <span class="comment">//这时候不仅div盒子变化了位置并且现在x y z三轴的方向也会随之改变！！！！</span></span><br><span class="line">         <span class="comment">//z变成了原来的y方向  y又变成原来的z方向 所以此时我们再向z移动100px就到了顶部</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="selector-class">.back</span> &#123;</span><br><span class="line">         <span class="attribute">color</span>: red;</span><br><span class="line">         <span class="attribute">transform</span>: translateZ(-<span class="number">100px</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="selector-class">.bottom</span> &#123;</span><br><span class="line">         <span class="attribute">color</span>: bisque;</span><br><span class="line">         <span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>) translateZ(-<span class="number">100px</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="selector-class">.front</span> &#123;</span><br><span class="line">         <span class="attribute">color</span>: palegreen;</span><br><span class="line">         <span class="attribute">transform</span>: translateZ(<span class="number">100px</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="selector-class">.left</span> &#123;</span><br><span class="line">         <span class="attribute">color</span>: rebeccapurple;</span><br><span class="line">         <span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>) translateZ(<span class="number">100px</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="selector-class">.right</span> &#123;</span><br><span class="line">         <span class="attribute">color</span>: darkorange;</span><br><span class="line">         <span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>) translateZ(-<span class="number">100px</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>看看现在的效果 如下图<br><img src="/images/picblog/css-zft2.png" alt="图片"><br>现在已经是一个正方体了但是却还不明显 我们让它总体沿着y轴旋转30° </p><p>在.container下加  transform:rotateY(35deg); 得到下图<br><img src="/images/picblog/css-zft3.png" alt="图片"></p><h3 id="最后我们加一个动画"><a href="#最后我们加一个动画" class="headerlink" title="最后我们加一个动画"></a>最后我们加一个动画</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> zhuan &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(0deg) <span class="built_in">rotateY</span>(0deg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(360deg) <span class="built_in">rotateY</span>(360deg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就达到了如图结果：<br><img src="/images/picblog/css-zft.gif" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/picblog/css-zft.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://aemple.top/categories/CSS/"/>
    
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>浅谈--forEach、for in、for of、for</title>
    <link href="http://aemple.top/2018/03/29/js-%E5%BE%AA%E7%8E%AF%E5%8C%BA%E5%88%AB/"/>
    <id>http://aemple.top/2018/03/29/js-循环区别/</id>
    <published>2018-03-29T01:23:18.000Z</published>
    <updated>2018-11-04T06:56:13.661Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/picblog/for.png" alt="图片"></p><a id="more"></a> <h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>从ES5开始 Javascript内置了forEach方法 用来遍历<strong>数组</strong> 对只能是数组！！！</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">arr.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span> <span class="params">(val, index, arr)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// val是当前元素，index当前元素索引，arr当前数组</span></span><br><span class="line">     <span class="comment">//this：window</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>划重点上面的forEach里的<strong>this =&gt; window</strong>    怎么改呢？ 就是利用forEach的第二个参数了！！！</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">arr.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span> <span class="params">(val, index, arr)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// val是当前元素，index当前元素索引，arr当前数组</span></span><br><span class="line">     <span class="comment">//this =&gt;obj</span></span><br><span class="line">&#125;,obj)</span><br></pre></td></tr></table></figure><p>总结：写法简单了很多，但是也存在一个局限 就是你不能中断循环(使用break语句或使用return语句），而且只支持数组</p><h2 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h2><p>for-in循环实际是<strong>为循环”enumerable“对象而设计的</strong>,当然也可以用于数组，但是不推荐</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="variable">a:</span> <span class="string">'1'</span>, <span class="variable">b:</span> <span class="string">'2'</span>, <span class="keyword">c</span>: <span class="string">'3'</span>, d: <span class="string">'4'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> <span class="built_in">index</span> in obj) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">index</span>)    //遍历的实际上是对象的属性名称 <span class="keyword">a</span>,<span class="keyword">b</span>,<span class="keyword">c</span>,d</span><br><span class="line">    console.<span class="built_in">log</span>(obj[<span class="built_in">index</span>])  //这个才是属性对应的值<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码会出现的问题：<br>1.index 值 会是字符串（String）类型<br>2.循环不仅会遍历数组元素，还会遍历任意其他自定义添加的属性。</p><h2 id="for-of"><a href="#for-of" class="headerlink" title="for-of"></a>for-of</h2><p> 首先它是<strong>ES6</strong>中新增加的语法 </p><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> arr = [<span class="string">'China'</span>, <span class="string">'America'</span>, <span class="string">'Korea'</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> o <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o) <span class="comment">//China, America, Korea</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="它并不能循环一个普通对象"><a href="#它并不能循环一个普通对象" class="headerlink" title="它并不能循环一个普通对象"></a>它<strong>并不能</strong>循环一个普通对象</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="variable">a:</span> <span class="string">'1'</span>, <span class="variable">b:</span> <span class="string">'2'</span>, <span class="keyword">c</span>: <span class="string">'3'</span>, d: <span class="string">'4'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> <span class="keyword">o</span> of obj) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="keyword">o</span>)   //Uncaught TypeError: obj[Symbol.iterator] <span class="keyword">is</span> not <span class="keyword">a</span> <span class="function"><span class="keyword">function</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是可以循环一个<strong>拥有enumerable属性的</strong>对象。<br>如果我们按对象所拥有的属性进行循环，可使用内置的Object.keys()方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="string">'1'</span>, <span class="attr">b</span>: <span class="string">'2'</span>, <span class="attr">c</span>: <span class="string">'3'</span>, <span class="attr">d</span>: <span class="string">'4'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> o <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o) <span class="comment">// a,b,c,d</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果我们按对象所拥有的属性值进行循环，可使用内置的Object.values()方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="string">'1'</span>, <span class="attr">b</span>: <span class="string">'2'</span>, <span class="attr">c</span>: <span class="string">'3'</span>, <span class="attr">d</span>: <span class="string">'4'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> o <span class="keyword">of</span> <span class="built_in">Object</span>.values(obj)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o) <span class="comment">// 1,2,3,4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="循环一个字符串"><a href="#循环一个字符串" class="headerlink" title="循环一个字符串"></a>循环一个字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'love'</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> o <span class="keyword">of</span> str) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o) <span class="comment">// l,o,v,e</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环一个Map"><a href="#循环一个Map" class="headerlink" title="循环一个Map"></a>循环一个Map</h3><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, <span class="keyword">value</span>] <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  console.log(<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  console.log(entry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [a, 1]</span></span><br><span class="line"><span class="comment">// [b, 2]</span></span><br><span class="line"><span class="comment">// [c, 3]</span></span><br></pre></td></tr></table></figure><h3 id="循环一个Set"><a href="#循环一个Set" class="headerlink" title="循环一个Set"></a>循环一个Set</h3><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> Set([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> <span class="keyword">value</span> <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  console.log(<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="循环一个类型化数组"><a href="#循环一个类型化数组" class="headerlink" title="循环一个类型化数组"></a>循环一个类型化数组</h3><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> Uint<span class="number">8</span>Array([<span class="number">0</span>x<span class="number">00</span>, <span class="number">0</span>xff]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> <span class="keyword">value</span> <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  console.log(<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 255</span></span><br></pre></td></tr></table></figure><p>总结：<br>1.可以避免所有 <strong>for-in</strong> 循环的陷阱</p><p>2.不同于 <strong>forEach()</strong>，他可以使用 break, continue 和 return</p><p>3.for-of 循环不仅仅支持数组的遍历。同样<strong>适用于很多类似数组的对象</strong></p><p>4.它也<strong>支持字符串</strong>的遍历</p><p>5.for-of 并不适用于处理原有的原生对象</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/picblog/for.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://aemple.top/categories/JavaScript/"/>
    
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>javaScript递归函数</title>
    <link href="http://aemple.top/2018/03/27/digui/"/>
    <id>http://aemple.top/2018/03/27/digui/</id>
    <published>2018-03-27T07:33:09.000Z</published>
    <updated>2018-11-04T06:45:38.519Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/picblog/js-digui.png" alt="图片"></p><h4 id="首先什么是递归"><a href="#首先什么是递归" class="headerlink" title="首先什么是递归"></a>首先什么是递归</h4><blockquote><p>递归是一项非常重要的编程技巧，函数通过它调用其本身。 —msdn文档介绍</p></blockquote><a id="more"></a> <p>举个例子,常用的乘阶。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">flase<span class="keyword">if</span> (i === <span class="number">1</span>) <span class="keyword">return</span> i;</span><br><span class="line">flase<span class="keyword">return</span> i* factorial(i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(factorial(<span class="number">5</span>)); <span class="comment">// 5*4*3*2*1</span></span><br></pre></td></tr></table></figure><p>分几个步骤:</p><ul><li>声明一个函数factorial，接受一个参数i。</li><li>判断i是否等于1，如果等于1则直接返回i。</li><li>如果i不等于1，则返回i * factorial(i - 1)，再次调用函数本身。(如此如果严格可以判断i是否大于等于0）</li><li>然后函数就会重复2 - 3两个步骤，直至i减到1为止。</li></ul><h3 id="JavaScript执行上下文栈"><a href="#JavaScript执行上下文栈" class="headerlink" title="JavaScript执行上下文栈"></a>JavaScript执行上下文栈</h3><p>   大家可以看看这个教程，我认为很不错！<a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">地址</a></p><ul><li>JavaScript执行顺序。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = functiom () &#123;</span><br><span class="line">flase<span class="built_in">console</span>.log(<span class="string">'foo1'</span>)；</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = functiom () &#123;</span><br><span class="line">flase<span class="built_in">console</span>.log(<span class="string">'foo2'</span>)；</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"><span class="comment">//最后会打印出</span></span><br><span class="line"><span class="comment">//foo1</span></span><br><span class="line"><span class="comment">//foo2</span></span><br></pre></td></tr></table></figure><ul><li>解释一下这个为什么不会被覆盖<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上面的代码写成这样就比较好理解</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">flase<span class="built_in">console</span>.log(<span class="string">'foo1'</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">flase<span class="built_in">console</span>.log(<span class="string">'foo2'</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo1'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();  <span class="comment">// foo2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo2'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// foo2</span></span><br></pre></td></tr></table></figure><p>再解释一下这个！<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo1'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo2'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">foo();  <span class="comment">// foo2</span></span><br><span class="line">foo();  <span class="comment">// foo2</span></span><br></pre></td></tr></table></figure></p><ul><li>函数被提升之后第二个覆盖了第一个，这是JavaScript作用域提升。</li><li>JavaScript的可执行代码有三种，全局代码，函数代码，eval代码</li><li>当执行到一个函数的时候就会进行准备工作，叫做执行上下文。</li><li>原博客把执行上下文说的很清楚了，我理解了一部分。有兴趣可以点击上面的连接继续了解，继续讲递归。</li></ul><h4 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h4><p>根据上面的知识，以及以前的知识，我们都知道递归会消耗大量内存，之执行一个函数就压入上下文栈，直至递归结束才会释放，造成递归占用大量内存。</p><blockquote><p>尾调用，是指函数内部的最后一个动作是函数调用，改调用的返回值，直接返回给函数。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> <span class="params">(x)</span> </span>&#123;</span><br><span class="line">flase<span class="keyword">return</span> g(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 尾调用</span></span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(x)</span> </span>&#123;</span><br><span class="line">flase<span class="keyword">return</span> g(x) - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非尾调用</span></span><br></pre></td></tr></table></figure><p>用上面的上下文栈，来看第二个函数，函数f执行指挥返回一个g函数而g函数的结果需要f函数作用域内 - 1才是结果，导致引用的时候g函数入栈的时候会持有f函数的作用域，f得不到释放，一直等g函数结束之后才会被释放。</p><p>现在优化一下上面的递归</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span><span class="params">(i, res)</span> &#123;</span></span><br><span class="line">flase<span class="keyword">if</span>(<span class="built_in">i</span> === <span class="number">1</span>) <span class="keyword">return</span> res;</span><br><span class="line">flase<span class="keyword">return</span> <span class="built_in">factorial</span>(<span class="built_in">i</span><span class="number">-1</span>, <span class="built_in">i</span>*res)</span><br><span class="line">&#125;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">factorial</span>(<span class="number">4</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>这样优化函数，保持返回的函数没有上个函数的引用，这样上个函数在入栈之后执行到return之后就会被释放，而不会和上面的递归一样等到最终结果才会被释放。（ps。JavaScript上下文栈，需要好好看看比较重要）</p><p><code>## javaScript</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/picblog/js-digui.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;首先什么是递归&quot;&gt;&lt;a href=&quot;#首先什么是递归&quot; class=&quot;headerlink&quot; title=&quot;首先什么是递归&quot;&gt;&lt;/a&gt;首先什么是递归&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;递归是一项非常重要的编程技巧，函数通过它调用其本身。 —msdn文档介绍&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://aemple.top/categories/JavaScript/"/>
    
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>占领未来的打包工具---Parcel（介绍）</title>
    <link href="http://aemple.top/2018/03/19/packParcelOne/"/>
    <id>http://aemple.top/2018/03/19/packParcelOne/</id>
    <published>2018-03-19T14:01:32.000Z</published>
    <updated>2018-11-04T07:07:13.278Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/picblog/parcel.png" alt="图片"></p><h1 id="基本概况"><a href="#基本概况" class="headerlink" title="基本概况"></a>基本概况</h1><p>最近大家都在关注一个很流行的类似 webpack 的前端构建工具 Parcel。这个库刚出来没多久(截至目前发布几十天)，但是很受欢迎，看下图就知道它到底有多火了。</p><p><strong>这么火的东西我们怎么能不学呢？那么它到底火在哪儿？来看看我的示例分析(教程)吧！！！</strong><br><a id="more"></a> </p><h2 id="官方介绍地址"><a href="#官方介绍地址" class="headerlink" title="官方介绍地址"></a>官方介绍地址</h2><p><strong>官方地址：</strong><a href="https://parceljs.org/" target="_blank" rel="noopener">https://parceljs.org/</a></p><p><strong>GitHub地址：</strong><a href="https://github.com/parcel-bundler/parcel" target="_blank" rel="noopener">https://github.com/parcel-bundler/parcel</a></p><h1 id="Parcel-VS-Webpack"><a href="#Parcel-VS-Webpack" class="headerlink" title="Parcel VS Webpack"></a>Parcel VS Webpack</h1><h2 id="听我扯一扯"><a href="#听我扯一扯" class="headerlink" title="听我扯一扯"></a>听我扯一扯</h2><p>介绍这个库之前，我来说一下我个人觉得 webpack 的一些不好的地方（相对于 Parcel）。</p><p>  1、需要写配置文件（webpack.config.js），可能每使用一个功能，比如加载图片或 css，都要添加配置，要维护配置文件，而 Parcel 不需要。</p><p>  2、感觉编译或加载速度有些慢，特别是库多或项目复杂的时候，虽然有一些办法代码拆分的方法可以解决，比如 CommonsChunkPlugin 或 DLLPlugin 之类的，但这些方法有些复杂。</p><h2 id="官方数据"><a href="#官方数据" class="headerlink" title="官方数据"></a>官方数据</h2><p>  <strong>打包速度</strong></p><p>  真的飞一般的感觉吧！！！</p><p>  <img src="/images/picblog/parcel2.png" alt="图片"></p><h2 id="学习成本"><a href="#学习成本" class="headerlink" title="学习成本"></a>学习成本</h2><p> webpack需要一定的时间去学习如何使用而 Parcel 有很多优点，可以不使用配置文件，也就是说你只管写代码，它会自动运行，很智能化，打个比方吧，比如在 webpack 中如果要处理 css，那得要安装和加载一个 css 的 loader，然后配置文件写上几行，可是 Parcel 不需要，直接用就行。Parcel 学习起来比较简单，基本上可以说 “不用学习”，只是使用就可以了。<strong>除此之外</strong> 模块热替换和代码拆分的功能，Parcel 也有，还有，如果要你用 Parcel 写一个 react 的运行环境，可能不需要配置任何内容，只要安装几个 react 的包就可以用起来了。</p><p><strong>说了这么多，我还是要把官方对它的特性进行概括的图片放出来：</strong></p><p><img src="/images/picblog/parcel3.png" alt="图片"></p><blockquote><p><strong>说到这里小伙伴们是不是和我当初一样心动了呢？  下一篇博客我们一起上手玩起来吧！！！</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/picblog/parcel.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;基本概况&quot;&gt;&lt;a href=&quot;#基本概况&quot; class=&quot;headerlink&quot; title=&quot;基本概况&quot;&gt;&lt;/a&gt;基本概况&lt;/h1&gt;&lt;p&gt;最近大家都在关注一个很流行的类似 webpack 的前端构建工具 Parcel。这个库刚出来没多久(截至目前发布几十天)，但是很受欢迎，看下图就知道它到底有多火了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这么火的东西我们怎么能不学呢？那么它到底火在哪儿？来看看我的示例分析(教程)吧！！！&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="打包工具" scheme="http://aemple.top/categories/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="导航" scheme="http://aemple.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>markdown基础范例</title>
    <link href="http://aemple.top/2018/03/13/markdown/"/>
    <id>http://aemple.top/2018/03/13/markdown/</id>
    <published>2018-03-13T11:01:55.000Z</published>
    <updated>2018-11-04T07:02:11.482Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/picblog/markdown.png" alt="图片"></p><a id="more"></a> <h1 id="你好，前端"><a href="#你好，前端" class="headerlink" title="你好，前端"></a>你好，前端</h1><h2 id="第一篇文章哦"><a href="#第一篇文章哦" class="headerlink" title="第一篇文章哦"></a>第一篇文章哦</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 你好，前端</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 第一篇文章哦</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 三级标题</span></span></span><br></pre></td></tr></table></figure><hr><ul><li>列表1</li><li>列表2<br> a 次列表<br> b 此列表</li><li>列表三</li></ul><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 列表<span class="number">1</span></span></span><br><span class="line"><span class="ruby">- 列表<span class="number">2</span></span></span><br><span class="line"><span class="ruby">   a 次列表</span></span><br><span class="line"><span class="ruby">   b 此列表</span></span><br><span class="line"><span class="ruby">- 列表三</span></span><br></pre></td></tr></table></figure><hr><p><a href="http://www.aemple.top" target="_blank" rel="noopener">博客导航</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">博客导航</span>](<span class="link">http://www.aemple.top</span>)</span><br></pre></td></tr></table></figure><hr><p><img src="/images/avatar.jpg" alt="图片"></p><p><em>字体斜体</em><br><strong>字体加粗</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片</span>](<span class="link">/images/avatar.jpg</span>)</span><br><span class="line"></span><br><span class="line"><span class="emphasis">*字体斜体*</span></span><br><span class="line"><span class="strong">**字体加粗**</span></span><br></pre></td></tr></table></figure><hr><p><code>&lt;html&gt;&lt;/html&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>啦啦啦啦<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>我是应用块哦</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">我是应用块哦</span></span><br></pre></td></tr></table></figure><hr><hr><blockquote><p><strong>这些都经常用到希望小伙伴们加深记忆</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/picblog/markdown.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="markdown" scheme="http://aemple.top/categories/markdown/"/>
    
    
      <category term="导航" scheme="http://aemple.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hello-Blog</title>
    <link href="http://aemple.top/2018/03/13/helloHexo/"/>
    <id>http://aemple.top/2018/03/13/helloHexo/</id>
    <published>2018-03-13T06:22:03.000Z</published>
    <updated>2018-11-04T07:04:22.348Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/picblog/hello.png" alt="图片"></p><a id="more"></a> <h2 id="第一次当然要hello啦，我是邓波，是你小粉丝。"><a href="#第一次当然要hello啦，我是邓波，是你小粉丝。" class="headerlink" title="第一次当然要hello啦，我是邓波，是你小粉丝。"></a>第一次当然要hello啦，我是邓波，是你小粉丝。</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/picblog/hello.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://aemple.top/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="分享" scheme="http://aemple.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
