<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vue CLI使用scss]]></title>
    <url>%2F2018%2F04%2F12%2Fvue%2F</url>
    <content type="text"><![CDATA[在Vue CLI脚手架中使用scss今天学习vue当中遇到了如何配置scss的问题经过查证，写出记录。 第一步: npm install sass-loader node-sass 或者 yarn add sass-loader node-sass 如果node-sass在Windows中安装失败(需要Python和C++构建工具），大家可以使用cnpm单独安装node-sass 第二步: 在vue文件中使用 12345678910111213141516171819&lt;style lang=&apos;scss&apos;&gt;![scss](https://tse4-mm.cn.bing.net/th?id=OIP.HuHbi6D0rpzsTenMxWgfXgHaFj&amp;w=253&amp;h=184&amp;c=7&amp;o=5&amp;pid=1.7)#app &#123; @import url(&apos;./assets/aaa.scss&apos;); // 引入单独的scss文件 font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125; 这样就很愉快的完成了！使用Sass同理## Sass使用]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[天上便落下一粒沙，从此便有了撒哈拉--初入大学]]></title>
    <url>%2F2018%2F04%2F09%2FSH-1%2F</url>
    <content type="text"><![CDATA[我的大学生活 “准”大学生活: 高考后感觉身上的担子轻了，是到放松任性玩儿的时候了，于是高考后的六月七月都被我放肆的挥霍了。就在七月末的时候，突然冒出了一个奇怪的想法。 我想去找一份工作尝试着靠自己的能力来拿到一笔完完全全属于自己的money，但当时因为暑假已经不多了，所以在寻找了大概一个星期后也没有找到合适的。最后这个挺不错的想法，也被我否定了。剩下的时间，就回到了自己的家乡，开始着手准备迎接我的大学生活。 但回家后的生活过的也分的颓废，每天大概一两点睡差不多11点起床然后吃了饭之后可能又是躺尸啊，因为天气比较热。离去大学报到的时间越来越近了，我开始去网上寻找大学需要准备一些什么东西，然后心满意足的买了各种各样自己认为可能会需要的东西，在2016年9月2号的时候，我拖着它们来到了属于我的大学，开始了我的大学生活。 大学生活的开始（大一上学期）:军训 进入大学最开始的一件事可能就是军训了。我对军训的记忆就是累和放松，感到累，是因为每天要在特别热的环境下训练，不经意间，可能你还会收到教官的体罚。感到放松是因为每次休息或者教官带我们拉军歌大家一起玩，一起小游戏都会让你感觉特别的放松。 社团、学生会 军训后差不多就是学生会的招募了，当时面对各种各样的学生会自己感到很迷茫，对他们都没有太多的了解。他后来抱着自己想当一名志愿者，去帮助一下别人想法。经过了一轮面试，二轮面试，试用期这几个步骤终于成为了一名青协小干事。学生会给我留下的记忆就是温暖禾迷茫。会感到温暖欣慰，学生会是一个特别大的大家庭，每个人都是互相帮助来完成这个大家庭应该去完成的事情，而且在如果说某个人过生日，大家都会一起帮你过，常一起出去玩，一起做一些小活动，所以会感觉到温暖。感动迷茫，是因为很多事情自己之前都没有接触过功能无论是在对人或者对物都遇到了很多之前没遇到过的情景。刚加入学生会去死，学到了挺多认识到了许多许多新的朋友，知道了许多做事儿做人的方法。 专业方向加入学生会后不久学校或者学院特色的学长课堂开课了，当时我对学长课堂的各个方向基本都不太了解，在询问的几个学长之后。他们给出了我一些建议，最后选择了前端这个方向，能够选择到这个方向感觉也是人生对一种幸运，学长课堂在大二或者说大一下期仍然保留着的并不多，而就是其中一个，当时代前段的学长也不止一个到现‘在保留的却只有教我的学长还在带我们。在学长课堂的学习过程中学会的也不仅仅是一些专业知识。觉得自己更加去学会了去运用一些东西些论坛一些搜索引擎来解决问题的思想和方法。 大学课堂“自觉”是我对大学课堂的认识，在大学的课堂老司机的人不会在意你听课了，或者没有听课，老师也不会特别严苛的去检查你的任何关于学习的方面。 时间很快，差不多就到一个学期就这么过去了，一直踩着好运的我也以班级第二的成绩，哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈。 持续更新中···········]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈--forEach、for in、for of、for]]></title>
    <url>%2F2018%2F03%2F29%2Fjs-%E5%BE%AA%E7%8E%AF%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[forEach从ES5开始 Javascript内置了forEach方法 用来遍历数组 对只能是数组！！！ 12345 let arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;]arr.forEach(function (val, index, arr) &#123; // val是当前元素，index当前元素索引，arr当前数组 //this：window&#125;) 划重点上面的forEach里的this =&gt; window 怎么改呢？ 就是利用forEach的第二个参数了！！！ 12345 let arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;]arr.forEach(function (val, index, arr) &#123; // val是当前元素，index当前元素索引，arr当前数组 //this =&gt;obj&#125;,obj) 总结：写法简单了很多，但是也存在一个局限 就是你不能中断循环(使用break语句或使用return语句），而且只支持数组 for…infor-in循环实际是为循环”enumerable“对象而设计的,当然也可以用于数组，但是不推荐 12345let obj = &#123;a: &apos;1&apos;, b: &apos;2&apos;, c: &apos;3&apos;, d: &apos;4&apos;&#125;for (let index in obj) &#123; console.log(index) //遍历的实际上是对象的属性名称 a,b,c,d console.log(obj[index]) //这个才是属性对应的值1，2，3，4&#125; 以上代码会出现的问题：1.index 值 会是字符串（String）类型2.循环不仅会遍历数组元素，还会遍历任意其他自定义添加的属性。 for-of 首先它是ES6中新增加的语法 遍历数组 1234 let arr = [&apos;China&apos;, &apos;America&apos;, &apos;Korea&apos;]for (let o of arr) &#123; console.log(o) //China, America, Korea&#125; 它并不能循环一个普通对象1234let obj = &#123;a: &apos;1&apos;, b: &apos;2&apos;, c: &apos;3&apos;, d: &apos;4&apos;&#125;for (let o of obj) &#123; console.log(o) //Uncaught TypeError: obj[Symbol.iterator] is not a function&#125; 但是可以循环一个拥有enumerable属性的对象。如果我们按对象所拥有的属性进行循环，可使用内置的Object.keys()方法1234let obj = &#123;a: &apos;1&apos;, b: &apos;2&apos;, c: &apos;3&apos;, d: &apos;4&apos;&#125;for (let o of Object.keys(obj)) &#123; console.log(o) // a,b,c,d&#125; 如果我们按对象所拥有的属性值进行循环，可使用内置的Object.values()方法1234let obj = &#123;a: &apos;1&apos;, b: &apos;2&apos;, c: &apos;3&apos;, d: &apos;4&apos;&#125;for (let o of Object.values(obj)) &#123; console.log(o) // 1,2,3,4&#125; 循环一个字符串1234let str = &apos;love&apos;for (let o of str) &#123; console.log(o) // l,o,v,e&#125; 循环一个Map12345678910111213for (let [key, value] of iterable) &#123; console.log(value);&#125;// 1// 2// 3for (let entry of iterable) &#123; console.log(entry);&#125;// [a, 1]// [b, 2]// [c, 3] 循环一个Set12345678let iterable = new Set([1, 1, 2, 2, 3, 3]);for (let value of iterable) &#123; console.log(value);&#125;// 1// 2// 3 循环一个类型化数组1234567let iterable = new Uint8Array([0x00, 0xff]);for (let value of iterable) &#123; console.log(value);&#125;// 0// 255 总结：1.可以避免所有 for-in 循环的陷阱 2.不同于 forEach()，他可以使用 break, continue 和 return 3.for-of 循环不仅仅支持数组的遍历。同样适用于很多类似数组的对象 4.它也支持字符串的遍历 5.for-of 并不适用于处理原有的原生对象]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javaScript递归函数]]></title>
    <url>%2F2018%2F03%2F27%2Fdigui%2F</url>
    <content type="text"><![CDATA[首先什么是递归 递归是一项非常重要的编程技巧，函数通过它调用其本身。 —msdn文档介绍 举个例子,常用的乘阶。 12345function factorial(i) &#123; if (i === 1) return i; return i* factorial(i - 1);&#125;console.log(factorial(5)); // 5*4*3*2*1 分几个步骤: 声明一个函数factorial，接受一个参数i。 判断i是否等于1，如果等于1则直接返回i。 如果i不等于1，则返回i * factorial(i - 1)，再次调用函数本身。(如此如果严格可以判断i是否大于等于0） 然后函数就会重复2 - 3两个步骤，直至i减到1为止。 JavaScript执行上下文栈 大家可以看看这个教程，我认为很不错！地址 JavaScript执行顺序。 123456789101112var foo = functiom () &#123; console.log(&apos;foo1&apos;)；&#125;foo();var foo = functiom () &#123; console.log(&apos;foo2&apos;)；&#125;foo();//最后会打印出//foo1//foo2 解释一下这个为什么不会被覆盖12345678910//上面的代码写成这样就比较好理解var foo;foo = function() &#123; console.log(&apos;foo1&apos;)&#125;foo()foo = function() &#123; console.log(&apos;foo2&apos;)&#125;foo() 123456789101112131415function foo() &#123; console.log(&apos;foo1&apos;);&#125;foo(); // foo2function foo() &#123; console.log(&apos;foo2&apos;);&#125;foo(); // foo2 再解释一下这个！123456789101112function foo() &#123; console.log(&apos;foo1&apos;);&#125;function foo() &#123; console.log(&apos;foo2&apos;);&#125;foo(); // foo2foo(); // foo2 函数被提升之后第二个覆盖了第一个，这是JavaScript作用域提升。 JavaScript的可执行代码有三种，全局代码，函数代码，eval代码 当执行到一个函数的时候就会进行准备工作，叫做执行上下文。 原博客把执行上下文说的很清楚了，我理解了一部分。有兴趣可以点击上面的连接继续了解，继续讲递归。 尾调用根据上面的知识，以及以前的知识，我们都知道递归会消耗大量内存，之执行一个函数就压入上下文栈，直至递归结束才会释放，造成递归占用大量内存。 尾调用，是指函数内部的最后一个动作是函数调用，改调用的返回值，直接返回给函数。 1234function f (x) &#123; return g(x)&#125;// 尾调用 12345function f(x) &#123; return g(x) - 1&#125;// 非尾调用 用上面的上下文栈，来看第二个函数，函数f执行指挥返回一个g函数而g函数的结果需要f函数作用域内 - 1才是结果，导致引用的时候g函数入栈的时候会持有f函数的作用域，f得不到释放，一直等g函数结束之后才会被释放。 现在优化一下上面的递归 12345function factorial(i, res) &#123; if(i === 1) return res; return factorial(i-1, i*res)&#125;console.log(factorial(4, 1)) 这样优化函数，保持返回的函数没有上个函数的引用，这样上个函数在入栈之后执行到return之后就会被释放，而不会和上面的递归一样等到最终结果才会被释放。（ps。JavaScript上下文栈，需要好好看看比较重要） ## javaScript]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[占领未来的打包工具---Parcel（介绍）]]></title>
    <url>%2F2018%2F03%2F19%2FpackParcelOne%2F</url>
    <content type="text"><![CDATA[基本概况最近大家都在关注一个很流行的类似 webpack 的前端构建工具 Parcel。这个库刚出来没多久(截至目前发布几十天)，但是很受欢迎，看下图就知道它到底有多火了。 这么火的东西我们怎么能不学呢？那么它到底火在哪儿？来看看我的示例分析(教程)吧！！！ 官方介绍地址官方地址：https://parceljs.org/ GitHub地址：https://github.com/parcel-bundler/parcel Parcel VS Webpack听我扯一扯介绍这个库之前，我来说一下我个人觉得 webpack 的一些不好的地方（相对于 Parcel）。 1、需要写配置文件（webpack.config.js），可能每使用一个功能，比如加载图片或 css，都要添加配置，要维护配置文件，而 Parcel 不需要。 2、感觉编译或加载速度有些慢，特别是库多或项目复杂的时候，虽然有一些办法代码拆分的方法可以解决，比如 CommonsChunkPlugin 或 DLLPlugin 之类的，但这些方法有些复杂。 官方数据 打包速度 真的飞一般的感觉吧！！！ 学习成本 webpack需要一定的时间去学习如何使用而 Parcel 有很多优点，可以不使用配置文件，也就是说你只管写代码，它会自动运行，很智能化，打个比方吧，比如在 webpack 中如果要处理 css，那得要安装和加载一个 css 的 loader，然后配置文件写上几行，可是 Parcel 不需要，直接用就行。Parcel 学习起来比较简单，基本上可以说 “不用学习”，只是使用就可以了。除此之外 模块热替换和代码拆分的功能，Parcel 也有，还有，如果要你用 Parcel 写一个 react 的运行环境，可能不需要配置任何内容，只要安装几个 react 的包就可以用起来了。 说了这么多，我还是要把官方对它的特性进行概括的图片放出来： 说到这里小伙伴们是不是和我当初一样心动了呢？ 下一篇博客我们一起上手玩起来吧！！！]]></content>
      <categories>
        <category>打包工具</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown基础范例]]></title>
    <url>%2F2018%2F03%2F13%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[你好，前端第一篇文章哦三级标题123# 你好，前端## 第一篇文章哦### 三级标题 列表1 列表2 a 次列表 b 此列表 列表三 12345- 列表1- 列表2 a 次列表 b 此列表- 列表三 博客导航 1[博客导航](http://www.aemple.top) 字体斜体字体加粗 1234![图片](/images/avatar.jpg)*字体斜体***字体加粗** &lt;html&gt;&lt;/html&gt; 12345678&lt;html&gt; &lt;head&gt; &lt;title&gt;我是标题&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;啦啦啦啦&lt;h1&gt; &lt;/body&gt;&lt;/html&gt; 我是应用块哦 1&gt;我是应用块哦 这些都经常用到希望小伙伴们加深记忆]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello-Hexo]]></title>
    <url>%2F2018%2F03%2F13%2FhelloHexo%2F</url>
    <content type="text"><![CDATA[第一次当然要hello啦，我是邓波，是你小粉丝。]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
